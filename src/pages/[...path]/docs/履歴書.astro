---
import ResumePicture from "@components/docs/ResumePicture.astro";
import { mail } from "@components/Profile.astro";
import Link from "@components/ui/Link.astro";
import {
  getBuiltCompanies,
  getCertifications,
  getKnowHow,
  getLanguages,
} from "@integrations/content";
import {
  getAddress,
  getMotivationSentence,
  getMyName,
} from "@integrations/docs";
import { i18n, setDayjsLocale } from "@integrations/i18n-server";
import { capitalize } from "@integrations/text";
import DocumentPage from "@layouts/document/DocumentPage.astro";
import { getStaticPaths as getBasePaths } from "@pages/index.astro";
import { PHONE_NUMBER } from "astro:env/server";
import dayjs from "dayjs";

export const getStaticPaths = async (
  ...params: Parameters<typeof getBasePaths>
) =>
  getBasePaths({
    allowedLocales: ["ja"],
    allowedCompanies: (await getBuiltCompanies("resumeJa")).map(({ id }) => id),
    ...params[0],
  });

await setDayjsLocale(Astro);

const today = dayjs();
const dateOfBirth = dayjs("1997-09-01");

const t = i18n(Astro);

const address = await getAddress(Astro, { modelType: "latency_optimized" });

const knowHow = await getKnowHow(Astro);
const history = Object.fromEntries(
  Object.entries(knowHow)
    .reverse()
    .map(([category, experiences]) => [
      category,
      experiences
        .filter(
          ({ id, school, countAsExperience }) =>
            !id.startsWith("self ") && !(school && countAsExperience)
        )
        .flatMap((experience) => [
          { ...experience, end: undefined },
          { ...experience, start: undefined },
        ])
        .sort((a, b) => {
          const aDate = a.end ?? a.start;
          const bDate = b.end ?? b.start;
          return !bDate || (aDate && bDate.isAfter(aDate)) ? -1 : 1;
        }),
    ])
);

const current = await t("Current");

const qualifications = (await getCertifications()).filter(
  ({ type }) => type !== "award"
);

const languages = await getLanguages(Astro);

const complySentence = await t("I will comply with company regulations");

const motivationSentence = await getMotivationSentence(Astro);
const relocateSentence = `${await t("Open to relocate")}`;

const myName = await getMyName(Astro);
---

<DocumentPage class="print:prose-headings:text-inherit" isLocalized>
  <div class="grid grid-flow-col grid-cols-3 gap-4">
    <div class="col-span-2">
      <div class="flex items-baseline justify-between">
        <h1 class="tracking-[1.5rem]">履歴書</h1>
        {today.format("ll")}現在
      </div>
      <table class="mb-0 mt-4">
        <tbody>
          <tr>
            <td colspan="100%">
              <b class="mr-2">フリガナ</b>
              {myName.translated}
            </td>
          </tr>
          <tr>
            <td class="py-5" colspan="100%">
              <b class="mr-2">氏名</b>
              {myName.rawButOrdered}
            </td>
          </tr>
          <tr>
            <td
              >{dateOfBirth.format("ll")}生（満{
                today.diff(dateOfBirth, "years")
              }歳）</td
            >
            <td class="relative w-0">
              <b class="absolute left-1 top-0 text-xs">性別</b>
              男
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    <div class="flex items-center justify-center">
      <ResumePicture
        class="!h-44 rounded-none"
        top={false}
        aspect="3/4"
        outerProps={{ class: "!m-0" }}
      />
    </div>
  </div>
  <table class="-mt-[2px]">
    <tbody>
      <tr>
        <td>
          <b class="mr-2">フリガナ</b>
          <br />
          <Link href={`https://maps.google.com/?q=${address.raw}`}>
            {address.translated}
          </Link>
        </td>
        <td class="w-0">
          <b class="mr-2">電話</b>
          <br />
          {PHONE_NUMBER && <Link href={`tel:${PHONE_NUMBER}`} />}
        </td>
      </tr>
      <tr>
        <td>
          <b>現住所</b>
          <br />
          <Link href={`https://maps.google.com/?q=${address.raw}`}>
            {address.raw}
          </Link>
        </td>
        <td>
          <b>メール</b>
          <br />
          <Link href={`mailto:${mail}`} />
        </td>
      </tr>
    </tbody>
  </table>
  <table>
    <thead>
      <tr>
        <th class="w-0 text-center">年</th>
        <th class="w-0 text-center">月</th>
        <th class="text-center">学歴・職歴</th>
      </tr>
    </thead>
    <tbody>
      {
        Object.entries(history).map(async ([category, experiences]) => {
          const translatedCategory = await t(capitalize(category));

          return (
            <>
              <tr>
                <th />
                <th />
                <th class="text-center">{translatedCategory}</th>
              </tr>
              {experiences.map(
                async ({
                  start,
                  end,
                  id,
                  skill,
                  school,
                  translateId,
                  dropOut,
                  reasonForLeaving,
                }) => {
                  const date = start ?? end;
                  const baseSentence = `${translateId ? await t(capitalize(id)) : capitalize(id)} ${await t(skill.job.id)}`;
                  const sentence = start
                    ? `${baseSentence} ${school ? "入学" : "入社"}`
                    : school
                      ? `${baseSentence} ${dropOut ? "中退" : "卒業"}`
                      : reasonForLeaving
                        ? await t(capitalize(reasonForLeaving))
                        : await t("Left company for personal reasons");

                  return (
                    <tr>
                      <td class="text-center">
                        {date?.format("YYYY") ?? current}
                      </td>
                      <td class="text-center">
                        {date?.format("M") ?? current}
                      </td>
                      <td>{sentence}</td>
                    </tr>
                  );
                }
              )}
            </>
          );
        })
      }
      <tr>
        <td></td>
        <td></td>
        <td colspan="100%" class="text-right">以上</td>
      </tr>
    </tbody>
  </table>
  <table>
    <thead>
      <tr>
        <th class="w-0 text-center">年</th>
        <th class="w-0 text-center">月</th>
        <th class="text-center">免許・資格</th>
      </tr>
    </thead>
    <tbody>
      {
        qualifications.map(
          async ({ date, id, institution, translateInstitution }) => (
            <tr>
              <td class="text-center">{date.format("YYYY")}</td>
              <td class="text-center">{date.format("M")}</td>
              <td>
                {await t(capitalize(id))}
                {await t("(")}
                {translateInstitution
                  ? await t(capitalize(institution))
                  : capitalize(institution)}
                {await t(")")}
              </td>
            </tr>
          )
        )
      }
    </tbody>
  </table>
  <table>
    <tbody>
      <tr>
        <td rowspan="100%">
          <b>志望の動機、特技、好きな学科、アピールポイントなど</b>
          <br />
          {motivationSentence}
        </td>
        <td class="relative" colspan="100%">
          <b>通勤時間</b>
          <div class="my-2 flex flex-col items-center gap-2">
            <div class="h-6"></div>
            <div class="flex gap-12">
              <span>約</span><span>時間</span><span>分</span>
            </div>
          </div>
        </td>
      </tr>
      <tr>
        <td colspan="100%">
          <b>扶養家族数（配偶者を除く）</b>
          <div class="text-center">0</div>
          <div class="text-end">人</div>
        </td>
        <tr>
          <td class="w-32">
            <b>配偶者</b>
            <div class="text-center">無</div>
          </td>
          <td class="w-44">
            <b>配偶者の扶養義務</b>
            <div class="text-center">無</div>
          </td>
        </tr>
      </tr>
    </tbody>
  </table>
  <table>
    <thead>
      <tr>
        <th>語学レベル</th>
      </tr>
    </thead>
    <tbody>
      {
        languages.map(async ({ id, level }) => (
          <tr>
            <td>
              {await t(id)}
              {await t("(")}
              {await t(level)}
              {await t(")")}
            </td>
          </tr>
        ))
      }
    </tbody>
  </table>
  <table>
    <thead>
      <tr>
        <th>本人希望記入欄</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>{complySentence}</td>
      </tr>
      <tr>
        <td>{relocateSentence}</td>
      </tr>
    </tbody>
  </table>
</DocumentPage>
