---
import { getStaticPaths as getBasePaths } from "@pages/index.astro";
import DocumentPage from "@layouts/document/DocumentPage.astro";
import { i18n, setLocale } from "@integrations/i18n-server";
import dayjs from "dayjs";
import duration from "dayjs/plugin/duration";
import { getSummary } from "@integrations/docs";
import Text from "@components/ui/Text.astro";
import {
  getCategory,
  getKnowHow,
  getPublishingDate,
  getDevelopmentTime,
  getTeam,
} from "@integrations/content";
import { getFormattedDates } from "@components/docs/ResumeKnowHow.astro";
import Link from "@components/ui/Link.astro";
import {
  getMatchedPosts,
  getSiteLink,
  matchRoles,
} from "@integrations/astro-server";
import { applyMatch } from "@integrations/astro-server";
import { capitalize, toTextList } from "@integrations/text";
import { getEntryId } from "@layouts/document/Document.astro";
import { getTech } from "@components/TechList.astro";

export const getStaticPaths = () => getBasePaths({ allowedLocales: ["ja"] });

await setLocale(Astro);
dayjs.extend(duration);

const today = dayjs();

const t = i18n(Astro);

const name = await t("Hofer Max Ludovico");
const summary = await getSummary(Astro);

const { experience } = await getKnowHow(Astro);

const portfolioSentence = await t("Portfolio");
const portfolioLink = await getSiteLink(Astro);

// Number from 0-10 that filters out weak matches
const matchThreshold = 1;
const durationThreshold = dayjs.duration({ days: 4 });

const experienceTechThreshold = 0;

// TODO WRITE SELF PR
---

<DocumentPage pageProps={{ noTranslation: true }}>
  <h1 class="!text-2xl text-center">職務経歴書</h1>
  <div class="text-right mt-6">
    {today.format("ll")}
    <br />
    {name}（氏名）
  </div>
  <h2>■職務要約</h2>
  <Text>{summary}</Text>
  {portfolioSentence} 🡢 <Link href={portfolioLink} />
  <h2>■職務経歴詳細</h2>
  {
    experience &&
      Object.values(experience).map(
        async ({
          id,
          translateId,
          start,
          end,
          skill: { job, achievements, countAsWork },
          projects,
          tech,
          team,
        }) => {
          const organization = `${translateId ? await t(id) : id}${countAsWork ? `${await t("(")}${await t("school")}${await t(")")}` : ""}`;
          const dates = await getFormattedDates(Astro, start, end);
          const translatedJob = await t(job.id);
          const matchedProjects =
            projects &&
            (await getMatchedPosts(Astro, "projects", {
              entries: projects.map(({ id, ...project }) => ({
                // Fixes project IDs
                id: `${id}/${id}`,
                ...project,
              })),
            }));
          const projectData =
            matchedProjects &&
            applyMatch(matchedProjects, matchThreshold).filter(
              (project) => getDevelopmentTime(project)! > durationThreshold
            );

          const experienceTechIds = tech?.map(({ id }) => id);
          const experienceTechToDisplay = experienceTechIds
            ? (await getTech(Astro, experienceTechThreshold)).filter(({ id }) =>
                experienceTechIds.includes(id)
              )
            : [];

          const soloExperience =
            !team || (team.internal === 1 && !team.external);
          const experienceScaleText = soloExperience
            ? await t("Solo")
            : `${team.internal}名${team.external ? `（うち外注スタッフ${team.external}名）` : ""}`;

          return (
            <>
              <h3>{organization}</h3>
              <table>
                <thead>
                  <tr>
                    <th class="text-center">期間</th>
                    <th class="text-center">業務内容</th>
                    <th class="text-center">環境</th>
                    <th class="text-center">規模</th>
                  </tr>
                </thead>
                <tbody>
                  {projectData?.length ? (
                    projectData.map(async (project) => {
                      const publishingDate = getPublishingDate(project);
                      const dates = await getFormattedDates(
                        Astro,
                        publishingDate?.subtract(getDevelopmentTime(project)!)!,
                        publishingDate
                      );

                      const category = await t(getCategory(project)!);

                      const team = getTeam(project);

                      const {
                        collection,
                        id,
                        data: { roles, tech, awards },
                      } = project;

                      const soloDeveloped =
                        !team || (team.internal === 1 && !team.external);
                      const scaleText = soloDeveloped
                        ? await t("Solo")
                        : `${team.internal}名${team.external ? `（うち外注スタッフ${team.external}名）` : ""}`;

                      const projectLink = await getSiteLink(
                        Astro,
                        `${collection}/${getEntryId(id)}`
                      );

                      const rolesToDisplay = applyMatch(
                        await matchRoles(
                          Astro,
                          roles.map((roleInfo) => ({
                            data: roleInfo,
                            roles: [roleInfo.role],
                          }))
                        )
                      );

                      const rolesSentence = `${await t(capitalize(toTextList(rolesToDisplay.slice(0, 3).map(({ role: { id } }) => id))))}${await t(".")}`;

                      const achievementsToDisplay = [
                        ...(awards?.map((award) => `Won ${award}`) ?? []),
                        ...rolesToDisplay.flatMap(
                          ({ achievements }) => achievements
                        ),
                      ].slice(0, 2);

                      const techIds = tech.map(({ id }) => id);
                      const techToDisplay = (await getTech(Astro)).filter(
                        ({ id }) => techIds.includes(id)
                      );

                      return (
                        <tr>
                          <td>{dates.join("～")}</td>
                          <td>
                            [役職] {rolesSentence}
                            <br />
                            <br />
                            [ポイント]
                            <ul class="mt-0">
                              {achievementsToDisplay.map((achievement) => (
                                <Text tag="li">{capitalize(achievement)}.</Text>
                              ))}
                            </ul>
                            <Link href={projectLink} />
                          </td>
                          <td>
                            {techToDisplay.map(async ({ id }, index) => {
                              const translatedId = await t(id);

                              return (
                                <>
                                  {index ? <br /> : ""}
                                  {translatedId}
                                </>
                              );
                            })}
                          </td>
                          <td>
                            [プロジェクト]
                            <br />
                            {category}
                            <br />
                            <br />
                            [チーム]
                            <br />
                            {scaleText}
                          </td>
                        </tr>
                      );
                    })
                  ) : (
                    <tr>
                      <td>{dates.join("～")}</td>
                      <td>
                        [担当業務] {translatedJob}
                        <br />
                        <br />
                        [ポイント]
                        <ul>
                          {achievements.map((achievement) => (
                            <Text tag="li">{achievement}</Text>
                          ))}
                        </ul>
                      </td>
                      <td>
                        {experienceTechToDisplay.map(async ({ id }, index) => {
                          const translatedId = await t(id);

                          return (
                            <>
                              {index ? <br /> : ""}
                              {translatedId}
                            </>
                          );
                        })}
                      </td>
                      <td>
                        [会社]
                        <br />
                        {experienceScaleText}
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </>
          );
        }
      )
  }
  <h2>■自己PR</h2>
  <p>
    目標実現を意識したサイトデザインを心がけ、プロデューサーとしてクライアントと制作スタッフの要
    望の調整を行ってまいりました。常に目標と認識の確認を行い、プロジェクトメンバー全員が最新情報
    と当事者意識を持ち、一丸となってプロジェクトを進行させることを心がけました。その結果、担当プ
    ロジェクトの目標はすべて達成し、納期も遅れることはありませんでした。
    今後も、クライアントとメンバー双方が満足できるプロジェクト管理者を目指したいと考えています。
  </p>
  <p class="text-right">以上</p>
</DocumentPage>
