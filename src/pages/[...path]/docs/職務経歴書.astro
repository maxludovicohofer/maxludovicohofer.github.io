---
import ShokumuEntry from "@components/docs/ShokumuEntry.astro";
import Link from "@components/ui/Link.astro";
import { getStaticPaths as getBasePaths } from "@docs/Â±•Ê≠¥Êõ∏.astro";
import {
  applyMatch,
  getMatchedPosts,
  getSiteLink,
  matchRoles,
} from "@integrations/astro-server";
import {
  compactTechList,
  getCategory,
  getDevelopmentTime,
  getKnowHow,
  getResumeProps,
  getTeam,
  getTechList,
} from "@integrations/content";
import { getMyName, getSelfPRSentence, getSummary } from "@integrations/docs";
import { i18n, setDayjsLocale } from "@integrations/i18n-server";
import { capitalize } from "@integrations/text";
import { getEntryId } from "@layouts/document/Document.astro";
import DocumentPage from "@layouts/document/DocumentPage.astro";
import dayjs from "dayjs";
import duration from "dayjs/plugin/duration";

export const getStaticPaths = getBasePaths;

await setDayjsLocale(Astro);
dayjs.extend(duration);

const today = dayjs();

const t = i18n(Astro);

const myName = await getMyName(Astro);
const summary = await getSummary(Astro);

const { fullResume } = await getResumeProps(Astro);

const { experience } = await getKnowHow(Astro);

const portfolioSentence = await t("Portfolio");
const portfolioLink = await getSiteLink(Astro);

// Number from 0-10 that filters out weak matches
const projectMatchThreshold = 1;
const durationThreshold = dayjs.duration({ days: 4 });

const experienceTechThreshold = 1;
const techList = await getTechList(Astro);

const selfPRSentence = await getSelfPRSentence(Astro);

// TODO ADD PERSONAL PROJECTS
// TODO PHASE 2 SHOULD ALSO GET ALL SKILLS OF EXPERIENCES, AND REMOVE EXPERIENCES IF IRRELEVANT
// TODO PHASE 2 SHOULD HAVE A MAX NUMBER OF ENTRIES AND SELECT BASED ON THAT MAX NUMBER
// TODO PHASE 2 SPECIFY TIME GAPS AS "SELF STUDY FOR CAREER CHANGE"
---

<DocumentPage class="print:prose-headings:text-inherit" isLocalized>
  <h1 class="text-center !text-2xl">ËÅ∑ÂãôÁµåÊ≠¥Êõ∏</h1>
  <div class="mt-6 text-right">
    {today.format("ll")}
    <br />
    {myName.translated}ÔºàÊ∞èÂêçÔºâ
  </div>
  <h2>‚ñ†ËÅ∑ÂãôË¶ÅÁ¥Ñ</h2>
  <p>
    {summary}
    <br />
    <br />
    {portfolioSentence} ü°¢ <Link href={portfolioLink} />
  </p>
  <h2>‚ñ†ËÅ∑ÂãôÁµåÊ≠¥Ë©≥Á¥∞</h2>
  {
    experience &&
      Object.values(experience).map(
        async ({
          id,
          translateId,
          school,
          start,
          end,
          skills,
          projects,
          tech,
          team,
        }) => {
          const organization = `${translateId ? await t(capitalize(id)) : capitalize(id)}${id.startsWith("self ") ? "" : `${await t("(")}${school ? await t("school") : "Ê≠£Á§æÂì°„Å®„Åó„Å¶Âã§Âãô"}${await t(")")}`}`;

          const experienceTech =
            tech &&
            compactTechList(
              await getTechList(Astro, experienceTechThreshold, {
                entries: tech,
              })
            );

          const matchedProjects =
            projects &&
            (await getMatchedPosts(Astro, "projects", {
              entries: projects.map(({ id, ...project }) => ({
                // Fixes project IDs
                id: `${id}/${id}`,
                ...project,
              })),
              noDrafts: true,
            }));

          const relevantProjects =
            matchedProjects &&
            applyMatch(matchedProjects, projectMatchThreshold)
              .filter((project) =>
                fullResume
                  ? true
                  : getDevelopmentTime(project)! > durationThreshold
              )
              .slice(0, fullResume ? undefined : 2)
              .sort((a, b) =>
                b.publishingDate.isAfter(a.publishingDate) ? 1 : -1
              );

          const { job, tasks, achievements } = skills[0]!;

          return (
            <>
              <h3>{organization}</h3>
              <table>
                <thead>
                  <tr>
                    <th class="w-56 text-center">ÁØÑÂõ≤</th>
                    <th class="min-w-80 text-center">Ê•≠ÂãôÂÜÖÂÆπ</th>
                    <th class="w-56 text-center">Áí∞Â¢É</th>
                  </tr>
                </thead>
                <tbody>
                  {relevantProjects?.length ? (
                    relevantProjects.map(async (project) => {
                      const {
                        collection,
                        id,
                        publishingDate,
                        data: { roles, tech, awards },
                      } = project;

                      const matchedRoles = applyMatch(
                        await matchRoles(
                          Astro,
                          roles.map((roleInfo) => ({
                            data: roleInfo,
                            roles: [roleInfo.role],
                          }))
                        )
                      );

                      const projectTech = compactTechList(
                        await getTechList(Astro, undefined, {
                          entries: tech,
                        })
                      );

                      return (
                        <ShokumuEntry
                          start={publishingDate.subtract(
                            //! Dayjs has issue with weeks at the moment, so must transform in ms
                            getDevelopmentTime(project)!.asMilliseconds()
                          )}
                          end={publishingDate}
                          roles={matchedRoles.map(({ role }) => role)}
                          responsibilities={matchedRoles.flatMap(
                            ({ tasks }) => tasks
                          )}
                          points={[
                            ...(awards?.map((award) => `Won ${award}`) ?? []),
                            ...matchedRoles.flatMap(
                              ({ achievements }) => achievements
                            ),
                          ]}
                          link={await getSiteLink(
                            Astro,
                            `${collection}/${getEntryId(id)}`
                          )}
                          tech={projectTech}
                          projectType={getCategory(project)}
                          team={getTeam(project)!}
                          full={fullResume}
                        />
                      );
                    })
                  ) : (
                    <ShokumuEntry
                      start={start}
                      end={end}
                      roles={[job]}
                      responsibilities={tasks}
                      points={achievements}
                      tech={experienceTech!}
                      team={team!}
                    />
                  )}
                </tbody>
              </table>
            </>
          );
        }
      )
  }
  <h2>‚ñ†„ÉÜ„ÇØ„Éã„Ç´„É´„Çπ„Ç≠„É´</h2>
  <table>
    <thead>
      <tr>
        <th class="w-0 min-w-36 text-center">Á®ÆÈ°û</th>
        <th class="w-0 text-nowrap text-center">‰ΩøÁî®ÊúüÈñì</th>
        <th class="text-center">Ê©üËÉΩ</th>
      </tr>
    </thead>
    <tbody>
      {
        techList.map(({ title, experience, items }) => (
          <tr>
            <td>{title}</td>
            <td class="text-right">
              {experience || (
                <ol class="my-0 list-none ps-0">
                  {items.map(({ experience }) => (
                    <li class="my-0 ps-0">{experience}</li>
                  ))}
                </ol>
              )}
            </td>
            <td>
              <ol class="my-0 list-none ps-0">
                {items.map(({ title }) => (
                  <li class="my-0 ps-0">{title}</li>
                ))}
              </ol>
            </td>
          </tr>
        ))
      }
    </tbody>
  </table>
  <h2>‚ñ†Ëá™Â∑±PR</h2>
  <p>{selfPRSentence}</p>
  <p class="text-right">‰ª•‰∏ä</p>
</DocumentPage>
