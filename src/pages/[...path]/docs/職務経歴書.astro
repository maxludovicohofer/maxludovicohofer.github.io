---
import { getStaticPaths as getBasePaths } from "@pages/index.astro";
import DocumentPage from "@layouts/document/DocumentPage.astro";
import { i18n, setLocale } from "@integrations/i18n-server";
import dayjs from "dayjs";
import duration from "dayjs/plugin/duration";
import { getSummary } from "@integrations/docs";
import {
  getCategory,
  getKnowHow,
  getDevelopmentTime,
  getTeam,
} from "@integrations/content";
import Link from "@components/ui/Link.astro";
import {
  getMatchedPosts,
  getSiteLink,
  matchRoles,
} from "@integrations/astro-server";
import { applyMatch } from "@integrations/astro-server";
import { getEntryId } from "@layouts/document/Document.astro";
import ShokumuEntry from "@components/docs/ShokumuEntry.astro";
import { getTech } from "@components/TechList.astro";

export const getStaticPaths = () => getBasePaths({ allowedLocales: ["ja"] });

await setLocale(Astro);
dayjs.extend(duration);

const today = dayjs();

const t = i18n(Astro);

const name = await t("Hofer Max Ludovico");
const summary = await t(await getSummary(Astro));

const { experience } = await getKnowHow(Astro);

const portfolioSentence = await t("Portfolio");
const portfolioLink = await getSiteLink(Astro);

// Number from 0-10 that filters out weak matches
const projectMatchThreshold = 1;
const durationThreshold = dayjs.duration({ days: 4 });

const experienceTechThreshold = 1;

// TODO WRITE SELF PR
// TODO CHECK EDGE FAVORITES FOR HOW TO WRITE THE TWO RESUMES
---

<DocumentPage pageProps={{ noTranslation: true }}>
  <h1 class="!text-2xl text-center">職務経歴書</h1>
  <div class="text-right mt-6">
    {today.format("ll")}
    <br />
    {name}（氏名）
  </div>
  <h2>■職務要約</h2>
  <p>
    {summary}
    <br />
    <br />
    {portfolioSentence} 🡢 <Link href={portfolioLink} />
  </p>
  <h2>■職務経歴詳細</h2>
  {
    experience &&
      Object.values(experience).map(
        async ({
          id,
          translateId,
          start,
          end,
          skill: { job, achievements, countAsWork },
          projects,
          tech,
          team,
        }) => {
          const organization = `${translateId ? await t(id) : id}${countAsWork ? `${await t("(")}${await t("school")}${await t(")")}` : ""}`;

          const matchedProjects =
            projects &&
            (await getMatchedPosts(Astro, "projects", {
              entries: projects.map(({ id, ...project }) => ({
                // Fixes project IDs
                id: `${id}/${id}`,
                ...project,
              })),
            }));
          const relevantProjects =
            matchedProjects &&
            applyMatch(matchedProjects, projectMatchThreshold)
              .filter(
                (project) => getDevelopmentTime(project)! > durationThreshold
              )
              .slice(0, 3)
              .sort((a, b) =>
                b.publishingDate.isAfter(a.publishingDate) ? 1 : -1
              );

          const experienceTech =
            tech &&
            (await getTech(Astro, experienceTechThreshold, {
              entries: tech,
            }));

          return (
            <>
              <h3>{organization}</h3>
              <table>
                <thead>
                  <tr>
                    <th class="text-center w-56">範囲</th>
                    <th class="text-center min-w-96">業務内容</th>
                    <th class="text-center w-56">環境</th>
                  </tr>
                </thead>
                <tbody>
                  {relevantProjects?.length ? (
                    relevantProjects.map(async (project) => {
                      const {
                        collection,
                        id,
                        publishingDate,
                        data: { roles, tech, awards },
                      } = project;

                      const projectRoles = applyMatch(
                        await matchRoles(
                          Astro,
                          roles.map((roleInfo) => ({
                            data: roleInfo,
                            roles: [roleInfo.role],
                          }))
                        )
                      );

                      const projectTech = await getTech(Astro, undefined, {
                        entries: tech,
                      });

                      return (
                        <ShokumuEntry
                          start={publishingDate.subtract(
                            //! Dayjs has issue with weeks at the moment, so must transform in ms
                            getDevelopmentTime(project)!.asMilliseconds()
                          )}
                          end={publishingDate}
                          roles={projectRoles.map(({ role }) => role)}
                          points={[
                            ...(awards?.map((award) => `Won ${award}`) ?? []),
                            ...projectRoles.flatMap(
                              ({ achievements }) => achievements
                            ),
                          ]}
                          link={await getSiteLink(
                            Astro,
                            `${collection}/${getEntryId(id)}`
                          )}
                          tech={projectTech}
                          projectType={getCategory(project)}
                          team={getTeam(project)!}
                        />
                      );
                    })
                  ) : (
                    <ShokumuEntry
                      start={start}
                      end={end}
                      roles={[job]}
                      points={achievements}
                      tech={experienceTech!}
                      team={team!}
                    />
                  )}
                </tbody>
              </table>
            </>
          );
        }
      )
  }
  <h2>■自己PR</h2>
  <p>
    目標実現を意識したサイトデザインを心がけ、プロデューサーとしてクライアントと制作スタッフの要
    望の調整を行ってまいりました。常に目標と認識の確認を行い、プロジェクトメンバー全員が最新情報
    と当事者意識を持ち、一丸となってプロジェクトを進行させることを心がけました。その結果、担当プ
    ロジェクトの目標はすべて達成し、納期も遅れることはありませんでした。
    今後も、クライアントとメンバー双方が満足できるプロジェクト管理者を目指したいと考えています。
  </p>
  <p class="text-right">以上</p>
</DocumentPage>
