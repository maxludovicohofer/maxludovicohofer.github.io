---
import ResumeKnowHow from "@components/docs/ResumeKnowHow.astro";
import ResumePicture from "@components/docs/ResumePicture.astro";
import { mail } from "@components/Profile.astro";
import Link from "@components/ui/Link.astro";
import Text from "@components/ui/Text.astro";
import { groupBy } from "@integrations/array";
import { getSiteLink } from "@integrations/astro-server";
import {
  compactTechList,
  getBuiltCompanies,
  getLanguages,
  getTechList,
} from "@integrations/content";
import {
  getAddress,
  getMyName,
  getSummary,
  getWorkFieldsSentence,
} from "@integrations/docs";
import { i18n, setDayjsLocale } from "@integrations/i18n-server";
import { capitalize, toTextList, uncapitalize } from "@integrations/text";
import DocumentPage from "@layouts/document/DocumentPage.astro";
import { getStaticPaths as getBasePaths } from "@pages/index.astro";
import { PHONE_NUMBER } from "astro:env/server";
import dayjs from "dayjs";
import duration from "dayjs/plugin/duration";
import relativeTime from "dayjs/plugin/relativeTime";

export const getStaticPaths = async (
  ...params: Parameters<typeof getBasePaths>
) =>
  getBasePaths({
    excludedLocales: ["ja"],
    allowedCompanies: await getBuiltCompanies("resume"),
    ...params[0],
  });

interface Props {}

const portfolioLink = await getSiteLink(Astro);

const workFieldsSentence = await getWorkFieldsSentence(Astro);

const techList = compactTechList(await getTechList(Astro));

await setDayjsLocale(Astro);
dayjs.extend(duration);
dayjs.extend(relativeTime);

const t = i18n(Astro);
const address = await getAddress(Astro);

const portfolioSentence = await t("Portfolio");
const relocateSentence = `${await t(" ")}${await t("(")}${await t("open to relocate")}${await t(")")}`;

const languages = groupBy(await getLanguages(Astro), ({ level }) => level);

const summary = await getSummary(Astro);

const myName = await getMyName(Astro);

// TODO PHASE 2 UPDATE LINKEDIN AUTOMATICALLY
---

<DocumentPage>
  <ResumePicture />
  <h1>{myName.translated}</h1>
  <p>{summary}</p>
  <span>
    <Text tag="span" format="branded" translateProps={{ disable: true }}
      >üëú</Text
    >
    {portfolioSentence} ü°¢ <Link href={portfolioLink} />
    <br />
    <Text tag="span" format="branded" translateProps={{ disable: true }}
      >üì¨</Text
    >
    <Link href={`mailto:${mail}`} />
  </span>
  {
    PHONE_NUMBER && (
      <>
        <br />
        <Text tag="span" format="branded" translateProps={{ disable: true }}>
          üìû
        </Text>
        <Link href={`tel:${PHONE_NUMBER}`} />
      </>
    )
  }
  <br />
  <Text tag="span" format="branded" translateProps={{ disable: true }}>
    üìç
  </Text>
  <Link href={`https://maps.google.com/?q=${address.raw}`}
    >{address.translated}</Link
  >{relocateSentence}
  <ResumeKnowHow />
  <Text tag="h2">Skills</Text>
  <ul class="grid grid-cols-3">
    {
      techList.map(async ({ title, experience }) => {
        const techItem = `${title}${await t(" ")}${await t("(")}${uncapitalize(experience!)}${await t(")")}`;

        return <li class="my-0.5 pr-7">{techItem}</li>;
      })
    }
  </ul>
  <ul class="-mt-3">
    <Text tag="li"
      >Made games for desktop, mobile, and online and local multiplayer. {
        workFieldsSentence
      }</Text
    >
    <Text tag="li"
      >{
        Object.entries(languages).map(
          async ([level, languages]) =>
            `${await t(capitalize(level))}${await t(" ")}${await t("in")}${await t(" ")}${await t(toTextList(languages.map(({ id }) => id)))}${await t(".")}${await t(" ")}`
        )
      }</Text
    >
  </ul>
  <Text tag="h3">Extra</Text>
  <ul>
    <Text tag="li"
      >Keeping up to date with the latest technology and research.</Text
    >
    <Text tag="li"
      >Passionate about cinema and arts, especially cyberpunk and cosmic horror.</Text
    >
    <Text tag="li"
      >Creating electronic music and worked as mixing and mastering engineer.</Text
    >
  </ul>
</DocumentPage>
