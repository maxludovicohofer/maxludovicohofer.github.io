---
import ResumeExtra from "@components/docs/ResumeExtra.astro";
import ResumeKnowHow, {
  getFormattedKnowHow,
} from "@components/docs/ResumeKnowHow.astro";
import ResumeProjects from "@components/docs/ResumeProjects.astro";
import { mail } from "@components/Profile.astro";
import Link from "@components/ui/Link.astro";
import { getRole, getSiteLink } from "@integrations/astro-server";
import {
  compactTechList,
  defaultTechThreshold,
  getBuiltCompaniesByExclusion,
  getLanguages,
  getTechList,
} from "@integrations/content";
import {
  getAddress,
  getDocumentsBasePaths,
  getMyName,
  getSummary,
} from "@integrations/docs";
import { i18n, setDayjsLocale } from "@integrations/i18n-server";
import { findBestDivisor } from "@integrations/math";
import DocumentPage from "@layouts/document/DocumentPage.astro";
import { PHONE_NUMBER } from "astro:env/server";
import dayjs from "dayjs";
import duration from "dayjs/plugin/duration";
import relativeTime from "dayjs/plugin/relativeTime";

export const getStaticPaths = async (
  ...params: Parameters<typeof getDocumentsBasePaths>
) => {
  const builtCompanies = await getBuiltCompaniesByExclusion("ja");

  return getDocumentsBasePaths({
    excludedLocales: ["ja"],
    allowedCompanies: builtCompanies.map(({ id }) => id),
    ...params[0],
  });
};

const portfolioLink = await getSiteLink(Astro);

const maxTech = 12;
const minTech = 8;

let techList = [] as ReturnType<typeof compactTechList>;
for (
  let threshold = defaultTechThreshold;
  techList.length < minTech || threshold < 0;
  threshold--
) {
  techList = compactTechList(await getTechList(Astro, threshold)).slice(
    0,
    maxTech
  );
}

await setDayjsLocale(Astro);
dayjs.extend(duration);
dayjs.extend(relativeTime);

const t = i18n(Astro);
const address = await getAddress(Astro);

const portfolioSentence = await t("Portfolio");
const relocateSentence = `${await t(" ")}${await t("(")}${await t("open to relocate")}${await t(")")}`;

const languages = await getLanguages(Astro);

const summary = await getSummary(Astro);
const myName = await getMyName(Astro);

export const sectionTitleClass =
  "not-prose mb-1 text-sm font-bold uppercase tracking-wider";

const skillsColumns = findBestDivisor(techList.length, 3);

const maxTechToOmit = 2;

// If tech list is too long and can be reduced by omitting few items, do it
if (techList.length > 11) {
  const techToOmit = techList.length % skillsColumns;
  if (techToOmit !== 0 && techToOmit <= maxTechToOmit)
    techList.splice(-techToOmit, techToOmit);
}

const skillGridRows = Math.ceil(techList.length / skillsColumns);
const shortestSkillGrid = skillGridRows < 4;
const shortSkillGrid = skillGridRows < 5;

const experienceLength = (
  await getFormattedKnowHow(Astro, {
    section: "experience",
    maxAchievements: 3,
  })
)
  .flatMap((knowHow) =>
    knowHow.flatMap(({ sections }) =>
      sections.map(({ translatedDescription }) => translatedDescription)
    )
  )
  .join(" ").length;

const shortExperience = experienceLength < 850;
const mediumExperience = experienceLength < 1050;

const { role } = await getRole(Astro);
const showPortfolio = !role.data.omit?.includes("portfolio");

const showExtra = shortExperience || (mediumExperience && shortSkillGrid);

// TODO PHASE 2 UPDATE LINKEDIN AUTOMATICALLY
---

<DocumentPage
  class="prose-h1:mb-2 prose-p:text-xs prose-li:text-xs prose-hr:my-4 print:prose-hr:border-zinc-950"
>
  <!-- <ResumePicture /> -->
  <h1>{myName.translated}</h1>
  <div class="text-xs">
    <Link href={`mailto:${mail}`} />{
      PHONE_NUMBER && (
        <>
          · <Link href={`tel:${PHONE_NUMBER}`} />
        </>
      )
    } · <Link href={`https://maps.google.com/?q=${address.raw}`}
      >{address.translated}</Link
    >{relocateSentence}
    {
      showPortfolio && (
        <div>
          {portfolioSentence}: <Link href={portfolioLink} />
        </div>
      )
    }
  </div>
  <hr />
  <h2 class={sectionTitleClass}>
    {await t("profile")}
  </h2>
  <p class="mb-2">{summary}</p>
  <hr />
  <h2 class={sectionTitleClass}>{await t("key skills")}</h2>
  <ul
    class={`grid gap-x-2 list-none ps-0 ${skillsColumns === 2 ? "grid-cols-2" : skillsColumns === 3 ? "grid-cols-3" : "grid-cols-4"}`}
  >
    {techList.map(async ({ title }) => <li class="my-0 ps-0">{title}</li>)}
  </ul>
  <hr />
  <h2 class={sectionTitleClass}>{await t("professional experience")}</h2>
  <ResumeKnowHow
    section="experience"
    maxAchievements={3}
    singleSkillPerJob={role.data.singleSkillPerJob}
  />
  <hr />
  <div
    class="grid grid-cols-2 divide-x divide-[var(--tw-prose-hr)] print:divide-zinc-950"
  >
    <div class="pr-4">
      <h2 class={sectionTitleClass}>{await t("education")}</h2>
      <ResumeKnowHow
        section="education"
        maxAchievements={(shortSkillGrid && shortExperience) || !showExtra
          ? 2
          : shortSkillGrid || mediumExperience
            ? 1
            : 0}
      />
      {
        showExtra && (
          <>
            <h2 class={sectionTitleClass}>{await t("certifications")}</h2>
            <ResumeExtra
              maxCertifications={
                shortSkillGrid && shortExperience ? 3 : shortExperience ? 2 : 1
              }
            />
          </>
        )
      }
    </div>
    <div class="pl-4">
      <h2 class={sectionTitleClass}>
        {await t("languages")}
      </h2>
      <ul class="grid grid-cols-1 gap-x-2 list-none ps-0">
        {
          languages.map(async ({ id, level }) => (
            <li class="ps-0 my-0">{await t(`${id}, ${level}`)}</li>
          ))
        }
      </ul>
      {
        showPortfolio &&
          (shortExperience || (shortestSkillGrid && mediumExperience)) && (
            <>
              <h2 class={sectionTitleClass}>{await t("selected portfolio")}</h2>
              <ResumeProjects
                numberOfProjects={shortSkillGrid && shortExperience ? 2 : 1}
                numberOfRoles={2}
              />
            </>
          )
      }
    </div>
  </div>
</DocumentPage>
