---
import Profile from "@components/Profile.astro";
import Showreel from "@components/Showreel.astro";
import TechPreview from "@components/TechPreview.astro";
import { defaultLocale, locales } from "@integrations/astro-config";
import {
  getPostListThreshold,
  getRole,
  getSortedPosts,
} from "@integrations/astro-server";
import { makePath } from "@integrations/text";
import Bento from "@layouts/Bento.astro";
import Page from "@layouts/Page.astro";
import PostListPreview from "@post/PostListPreview.astro";
import { getCollection } from "astro:content";
import { BUILD_MODE } from "astro:env/server";

export const getStaticPaths = async (options?: {
  allowedLocales?: (typeof locales)[number][];
  excludedLocales?: (typeof locales)[number][];
  allowedRoles?: string[];
  excludedRoles?: string[];
  allowedCompanies?: (string | undefined)[];
  excludedCompanies?: (string | undefined)[];
  localOnly?: boolean;
  dontBuild?: boolean;
}) => {
  if (options?.dontBuild && !import.meta.env.DEV) return [];
  if (options?.localOnly && BUILD_MODE !== "local") return [];

  let localePaths = [undefined, ...locales.slice(1)];
  if (options?.allowedLocales || options?.excludedLocales) {
    localePaths = localePaths.filter(
      (locale) =>
        (!options.allowedLocales ||
          options.allowedLocales.includes(locale ?? defaultLocale)) &&
        (!options.excludedLocales ||
          !options.excludedLocales.includes(locale ?? defaultLocale))
    );
  }

  const roles = (await getCollection("roles")).map(({ id }) => id);
  let defaultedRoles = [undefined, ...roles.slice(1)];
  if (options?.allowedRoles || options?.excludedRoles) {
    defaultedRoles = defaultedRoles.filter(
      (role) =>
        (!options.allowedRoles ||
          options.allowedRoles.includes(role ?? roles[0]!)) &&
        (!options.excludedRoles ||
          !options.excludedRoles.includes(role ?? roles[0]!))
    );
  }
  const rolePaths = defaultedRoles.map((role) => role && makePath(role));

  const companies = (await getCollection("companies")).filter(
    ({ id }) =>
      options?.allowedCompanies?.includes(id) &&
      (!options.excludedCompanies || !options.excludedCompanies.includes(id))
  );
  const companyPaths = [undefined, ...companies.map(({ id }) => makePath(id))];

  return localePaths.flatMap((locale) =>
    rolePaths.flatMap((role) =>
      companyPaths.flatMap((company) => ({
        params: {
          path:
            [locale, role, company].filter((param) => !!param).join("/") ||
            undefined,
        },
        props: {},
      }))
    )
  );
};

const {
  role: {
    data: { removeSections },
  },
} = await getRole(Astro);

// TODO PHASE 2 UPDATE TAILWIND (ISSUES WITH OPACITY AND OBJECT COVER)

const showreelSlot = !removeSections?.includes("showreel")
  ? "2-medium"
  : undefined;

const techSlot = !removeSections?.includes("tech") ? "4-small" : undefined;

const thoughtsSlot =
  (await getSortedPosts(Astro, "thoughts", getPostListThreshold("thoughts")))
    .length > 0
    ? "5-medium"
    : undefined;
---

<Page description="My portfolio and blog" homepage>
  <Bento>
    <Profile slot="1-small" />
    {showreelSlot && <Showreel slot={showreelSlot} />}
    <PostListPreview
      slot="3-large"
      collection="projects"
      previewEntries={3}
      contentListProps={{
        class: "lg:grid-cols-2",
      }}
    />
    {techSlot && <TechPreview slot={techSlot} titleProps={{ tag: "h2" }} />}
    {
      thoughtsSlot && (
        <PostListPreview
          slot={thoughtsSlot}
          collection="thoughts"
          previewEntries={1}
          contentListProps={{
            class: "lg:grid-cols-1",
          }}
        />
      )
    }
  </Bento>
</Page>
