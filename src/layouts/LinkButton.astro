---
import type { HTMLAttributes } from "astro/types";
import { formatUmamiEvent } from "./Link.astro";
import { getTextClass } from "@integrations/utils";

interface Props extends HTMLAttributes<"button"> {
  inline?: boolean;
  cardButton?: boolean;
  rounded?: boolean;
  noFocus?: boolean;
  noShadow?: boolean;
  fullHeight?: boolean;
  noRounding?: boolean;
  importance?: Parameters<typeof getTextClass>[0] | undefined;
}

const {
  inline,
  cardButton,
  class: className = "",
  rounded,
  noFocus,
  fullHeight,
  noShadow,
  noRounding,
  importance,
  "data-umami-event": umamiEvent,
  ...props
} = Astro.props;
---

<button
  type="button"
  class={`${className} ${cardButton ? `${noRounding ? "" : "rounded-3xl"} text-zinc-950 dark:text-zinc-100 bg-gradient-to-t from-25% to-80% from-zinc-100 dark:from-zinc-900 hover:from-yellow-300 active:from-yellow-600 hover:bg-opacity-50 active:bg-opacity-50 dark:hover:from-yellow-200 dark:active:from-yellow-400 dark:hover:bg-opacity-50 dark:active:bg-opacity-50` : `${noShadow ? "drop-shadow-md" : "shadow-md"} ${rounded ? "rounded-3xl" : `${noRounding ? "" : "rounded-xl"}`} ${fullHeight ? "" : "h-11 2xl:h-16"} bg-zinc-950 dark:bg-zinc-100 text-zinc-100 dark:text-zinc-950 hover:scale-105 active:scale-95`} hover:text-zinc-950 ${noShadow ? "hover:drop-shadow-lg active:drop-shadow" : "hover:shadow-lg active:shadow"} hover:bg-yellow-400 active:bg-yellow-600 dark:hover:bg-yellow-200 dark:active:bg-yellow-400 ${getTextClass(importance ?? "button")} font-semibold duration-150 ${inline ? "" : "w-full"}`}
  {...umamiEvent
    ? { "data-umami-event": formatUmamiEvent(Astro, umamiEvent) }
    : {}}
  {...props}><slot /></button
>
