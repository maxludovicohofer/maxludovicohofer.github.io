---
import Card from "@layouts/Card.astro";
import {
  getPostId,
  getPublishingDate,
  type PostCollection,
} from "@layouts/Post/Post.astro";
import PostPreview from "@layouts/Post/PostPreview.astro";
import type { HTMLAttributes } from "astro/types";
import { render, getCollection, type CollectionEntry } from "astro:content";
import { groupBy, makeHighlight, partition } from "src/utils";

interface Props extends HTMLAttributes<"ol"> {
  collection: PostCollection;
  exclude?: string[] | undefined;
  discreteHighlight?: true;
  numberOfItemsToLoadEager?: number | undefined;
}

const {
  collection,
  class: className = "",
  exclude = [],
  discreteHighlight,
  numberOfItemsToLoadEager = 0,
  ...props
} = Astro.props;

export const getSortedEntries = async <C extends PostCollection>(
  entryCollection: C,
  excluded: string[] = []
) => {
  const [highlights, entries] = partition(
    await getCollection(
      entryCollection,
      ({ data: { draft }, id }) =>
        (import.meta.env.DEV || !draft) &&
        excluded.every((entry) => id !== entry)
    )!,
    ({ data: { highlight } }) => highlight
  );

  const isProjects = entryCollection === "projects";

  const groupedEntries = groupBy(
    await Promise.all(
      entries.map(async (entry) => ({
        ...entry,
        publishingDate: getPublishingDate(
          entry,
          (await render(entry)).remarkPluginFrontmatter
        )!,
      }))
    ),
    // Group by category priority
    (entry) => {
      if (isProjects) {
        switch ((entry as CollectionEntry<"projects">).data.category) {
          case "Game":
            return "1";
        }
      }

      return "0";
    }
  );

  // Sort individual categories by latest first
  Object.values(groupedEntries).forEach((entries) =>
    entries.sort((a, b) =>
      b.publishingDate.isAfter(a.publishingDate) ? 1 : -1
    )
  );

  // Apply priorities
  return [...highlights, ...Object.values(groupedEntries).reverse().flat()];
};

const sortedEntries: CollectionEntry<PostCollection>[] = await getSortedEntries(
  collection,
  exclude
);
---

<ol
  class={`${className} content-list grid grid-flow-col md:grid-flow-row gap-4 overflow-x-scroll scrollbar-hide snap-mandatory pb-4 md:pb-0`}
  data-collection={collection}
  data-eager-items={numberOfItemsToLoadEager}
  {...discreteHighlight ? { "data-discrete": "" } : {}}
  {...props}
>
  {
    sortedEntries.map((entry, index) => {
      const isHighlight = !index || entry.data.highlight;

      const { highlightClass, importance } = isHighlight
        ? makeHighlight(discreteHighlight)
        : {};

      return (
        <Card
          tag="li"
          class={`snap-center w-[80dvw] md:w-auto h-[17rem] ${highlightClass ?? ""}`}
          data-slug={getPostId(entry)}
        >
          <PostPreview
            importance={importance ?? "container-item"}
            entry={entry}
            {...(entry.collection === "projects"
              ? { startHeading: "Design", short: true }
              : {})}
          />
        </Card>
      );
    })
  }
</ol>
<script>
  import type { CollectionKey } from "astro:content";
  import { getTitleClasses, makeHighlight, removeFromClasses } from "src/utils";

  const carouselEvents: {
    [K in keyof HTMLElementEventMap]?: (
      this: HTMLElement,
      e: HTMLElementEventMap[K]
    ) => any;
  } = {
    mouseenter: function () {
      this.style.cursor = "grab";
    },
    mousedown: function (e) {
      // Prevent selection of text
      e.preventDefault();
    },
    mousemove: function (e) {
      // Move only if mouse clicked and not right click
      if (!e.buttons || e.buttons === 2) return;

      const scrollTarget = this.scrollLeft - e.movementX;
      this.scrollLeft = scrollTarget;

      if (this.scrollLeft !== scrollTarget) {
        // Disable scroll snap when it misbehaves
        this.classList.remove("snap-x");
        this.scrollLeft = scrollTarget;
      }

      this.style.cursor = "grabbing";
    },
    mouseup: function () {
      this.style.cursor = "grab";
    },
  };

  document.addEventListener("astro:page-load", () => {
    const readEntriesString = localStorage.getItem("readEntries");

    const readEntries: Partial<Record<CollectionKey, string[]>> =
      readEntriesString ? JSON.parse(readEntriesString) : {};

    const observer = new ResizeObserver((entries) =>
      entries.forEach(({ target }) => {
        const list = target as HTMLElement;

        const actionToExecute =
          list.scrollWidth > list.offsetWidth
            ? "addEventListener"
            : "removeEventListener";

        for (const event in carouselEvents) {
          list[actionToExecute](
            event,
            carouselEvents[event as keyof typeof carouselEvents] as any
          );
        }

        if (actionToExecute === "removeEventListener")
          list.style.cursor = "unset";
      })
    );

    const replaceTitleClass = (
      container: Element,
      importance: Parameters<typeof getTitleClasses>[0]
    ) => {
      const containerTitle =
        container.querySelector<HTMLParagraphElement>("p.preview-title")!;

      // Replace text classes
      containerTitle.className = removeFromClasses(containerTitle.className, [
        "text",
      ]);
      containerTitle.className = `${containerTitle.className} text-balance text-zinc-950 dark:text-zinc-100 ${getTitleClasses(importance)}`;
    };

    document
      .querySelectorAll<HTMLOListElement>("ol.content-list")
      .forEach((list) => {
        // Add snap after in order to avoid autofocus on highlights
        list.classList.add("snap-x");

        observer.observe(list);

        // Order entries
        const readEntrySlugs =
          readEntries[list.dataset.collection as CollectionKey];

        if (!readEntrySlugs) return;

        readEntrySlugs.forEach((readSlug) => {
          for (const item of list.children) {
            if ((item as HTMLElement).dataset.slug !== readSlug) continue;

            // Process highlight
            if (item.classList.contains("col-span-full")) {
              // Remove highlight classes
              item.className = removeFromClasses(item.className, [
                "col-span",
                "md:h",
              ]);

              replaceTitleClass(item, "container-item");
            }

            // Move to end
            list.append(item);
            return;
          }
        });

        // Force first element to be highlight
        const firstElement = list.children[0];
        if (firstElement && !firstElement.classList.contains("col-span-full")) {
          const { highlightClass, importance } = makeHighlight(
            list.dataset.discrete !== undefined
          );

          firstElement.className = `${firstElement.className} ${highlightClass}`;

          replaceTitleClass(firstElement, importance);
        }

        const itemsToLoadEager = Number(list.dataset.eagerItems);

        if (!itemsToLoadEager) return;

        const media = list.querySelectorAll<
          HTMLImageElement | HTMLIFrameElement
        >("img, iframe");

        for (
          let index = 0;
          index < Math.min(media.length, itemsToLoadEager);
          index++
        ) {
          media[index]!.loading = "eager";
        }
      });
  });
</script>
