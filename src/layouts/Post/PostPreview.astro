---
import Text from "@layouts/Text.astro";
import { render, type CollectionEntry } from "astro:content";
import Button from "@layouts/Button.astro";
import { Image } from "astro:assets";
import {
  getCategory,
  getDescription,
  getPublishingDate,
  getPostCover,
  type PostCollection,
  getPostId,
} from "./Post.astro";
import type { ComponentProps } from "astro/types";
import Video from "@layouts/Video.astro";
import { isVideoCover } from "@components/Post/Cover.astro";
import PostContent from "./PostContent.astro";

interface Props {
  entry?: CollectionEntry<PostCollection> | undefined;
  descriptionAsBody?: boolean | undefined;
  readMore?: string;
  readMoreText?: string;
  readMoreClassName?: string;
  noReadMore?: boolean;
  minutesAlreadySpentReading?: number | undefined;
  importance?:
    | "low"
    | "medium"
    | "high"
    | "container-item"
    | "container-highlight"
    | undefined;
  tag?: ComponentProps<typeof Text>["tag"];
  hideDate?: boolean;
  container?: boolean;
  className?: string;
}

const {
  className = "",
  importance = "medium",
  entry,
  descriptionAsBody,
  readMore,
  readMoreText,
  noReadMore,
  readMoreClassName = "",
  tag,
  hideDate,
  container,
  minutesAlreadySpentReading = 0.5, // Time assumed to be already spent reading before clicking read more
} = Astro.props;

const { Content, remarkPluginFrontmatter } = entry ? await render(entry) : {};

const realMinutesToRead =
  remarkPluginFrontmatter &&
  remarkPluginFrontmatter.minutesRead - minutesAlreadySpentReading;

const minutesToRead =
  realMinutesToRead !== undefined && Math.max(Math.round(realMinutesToRead), 1);

const readMoreLink =
  noReadMore || (realMinutesToRead && realMinutesToRead < 0)
    ? undefined
    : (readMore ?? (entry && `/${entry.collection}/${getPostId(entry)}`));

const cover = getPostCover(entry);
const description = getDescription(entry);
const category = getCategory(entry);
const publishingDate =
  !hideDate &&
  getPublishingDate(entry, remarkPluginFrontmatter)?.format("D MMMM YYYY");

const subtitle = [category, publishingDate].filter((part) => !!part);

const backgroundClass = "object-cover pointer-events-none";
---

<div class={`${className} flex flex-col h-full justify-between`}>
  <div>
    {
      (Astro.slots.has("header") || entry?.data.draft) && (
        <Text subtitle tag="div">
          {entry?.data.draft ? (
            "Draft (not visible in production)"
          ) : (
            <slot name="header" />
          )}
        </Text>
      )
    }
    {
      (entry?.data.title || Astro.slots.has("title")) && (
        <Text
          title
          className={`preview-title ${
            importance === "container-item"
              ? "text-2xl 2xl:text-3xl"
              : importance === "container-highlight"
                ? "text-2xl md:text-4xl 2xl:text-6xl"
                : importance === "low"
                  ? "text-3xl lg:text-2xl 2xl:text-3xl"
                  : importance === "medium"
                    ? "text-3xl 2xl:text-5xl"
                    : "text-3xl lg:text-5xl 2xl:text-8xl"
          } ${container ? "lg:ml-4 mt-1 lg:mt-0" : ""}`}
        >
          {entry?.data.title ?? <slot name="title" />}
        </Text>
      )
    }
    {
      subtitle.length !== 0 && (
        <Text subtitle className="xl:mt-3">
          {subtitle.join(" \\ ")}
        </Text>
      )
    }
    <Text
      className={`${publishingDate ? "mt-4" : Content || Astro.slots.has("title") ? "mt-6" : ""} text-xl 2xl:text-3xl ${container ? "max-h-[32rem]" : readMoreLink ? "h-64" : ""}`}
      markdown={!!Content}
      tag={tag ?? (container ? "div" : undefined)}
      >{
        descriptionAsBody && description ? (
          description
        ) : Content ? (
          <PostContent Content={Content} />
        ) : (
          <slot />
        )
      }</Text
    >
  </div>
  {
    Astro.slots.has("footer") && (
      <Text subtitle className="mt-6" tag="div">
        <slot name="footer" />
      </Text>
    )
  }
</div>
{
  cover && (
    <div
      class={`absolute inset-0 pointer-events-none opacity-0 intersect:opacity-15 intersect-half duration-700 ${container ? "group-hover/container-card:opacity-15" : "group-hover/card:opacity-15"}`}
    >
      {isVideoCover(cover) ? (
        <Video className={backgroundClass} youTubeInfo={cover} />
      ) : (
        <Image
          src={cover()}
          class={`${backgroundClass} size-full`}
          alt={description ?? `Graphic explanation of "${entry!.data.title}"`}
        />
      )}
    </div>
  )
}
{
  readMoreLink && (
    <Button
      cardButton
      className={`${readMoreClassName} absolute bottom-0 left-0 h-24 2xl:h-32`}
      href={readMoreLink}
      navigate
    >
      <div
        class={`size-full flex flex-col justify-end pb-5 ${container ? "group-hover/container-card:animate-pulse" : "group-hover/card:animate-pulse"} intersect:animate-pulse lg:intersect:animate-none intersect-full`}
      >
        {readMoreText ??
          (minutesToRead ? `Read in ${minutesToRead} min` : "Read more")}
        <br />â–¼
      </div>
    </Button>
  )
}
