---
import Text from "@layouts/Text.astro";
import { render, type CollectionEntry } from "astro:content";
import Button from "@layouts/Button.astro";
import {
  getCategory,
  getPublishingDate,
  getPostCover,
  type PostCollection,
  getPostId,
  getDescription,
  getTitle,
} from "./Post.astro";
import type { ComponentProps, HTMLAttributes } from "astro/types";
import PostContent from "./PostContent.astro";
import Media from "@layouts/Media.astro";
import { getCoverAlt } from "@components/Post/CoverMedia.astro";
import getReadingTime from "reading-time";
import dayjs from "dayjs";
import duration from "dayjs/plugin/duration";

interface Props extends HTMLAttributes<"div"> {
  entry?: CollectionEntry<PostCollection> | undefined;
  startHeading?: string | undefined;
  short?: boolean | undefined;
  readMore?: string;
  readMoreText?: string;
  readMoreClass?: string;
  noReadMore?: boolean;
  importance?:
    | "low"
    | "medium"
    | "high"
    | "container-item"
    | "container-highlight"
    | undefined;
  tag?: ComponentProps<typeof Text>["tag"];
  hideDate?: boolean;
  container?: boolean;
}

const {
  class: className = "",
  container,
  importance = "medium",
  entry,
  startHeading,
  short,
  readMore,
  readMoreText,
  noReadMore,
  readMoreClass = "",
  tag,
  hideDate,
  ...props
} = Astro.props;

const { Content, remarkPluginFrontmatter } = entry ? await render(entry) : {};

const title = getTitle(entry);

const renderedContent =
  getDescription(entry, short ? 1 : undefined, short, startHeading) ?? Content;

const isMarkdown = !!remarkPluginFrontmatter;

const minutesToRead = isMarkdown
  ? remarkPluginFrontmatter.minutesRead -
    Math.min(
      typeof renderedContent === "string"
        ? // Description time
          getReadingTime(renderedContent).minutes
        : // Post time
          remarkPluginFrontmatter.minutesRead,
      // Maximum time assumed to be already spent reading before clicking read more
      0.2
    )
  : undefined;

dayjs.extend(duration);

const readMoreLink =
  noReadMore || (isMarkdown && minutesToRead! < 0)
    ? undefined
    : (readMore ?? (entry && `/${entry.collection}/${getPostId(entry)}`));

const cover = getPostCover(entry);
const category = getCategory(entry);
const publishingDate =
  !hideDate &&
  getPublishingDate(entry, remarkPluginFrontmatter)?.format("D MMMM YYYY");

const subtitle = [category, publishingDate].filter((part) => !!part);
---

<div class={`${className} flex flex-col h-full justify-between`} {...props}>
  <div>
    {
      (Astro.slots.has("header") || entry?.data.draft) && (
        <Text subtitle tag="div">
          {entry?.data.draft ? (
            "Draft (not visible in production)"
          ) : (
            <slot name="header" />
          )}
        </Text>
      )
    }
    {
      (title || Astro.slots.has("title")) && (
        <Text
          title
          class={`preview-title ${
            importance === "container-item"
              ? "text-2xl 2xl:text-3xl"
              : importance === "container-highlight"
                ? "text-2xl md:text-4xl 2xl:text-6xl"
                : importance === "low"
                  ? "text-3xl lg:text-2xl 2xl:text-3xl"
                  : importance === "medium"
                    ? "text-3xl 2xl:text-5xl"
                    : "text-3xl lg:text-5xl 2xl:text-8xl"
          } ${container ? "lg:ml-4 mt-1 lg:mt-0" : ""}`}
        >
          {title ?? <slot name="title" />}
        </Text>
      )
    }
    {
      subtitle.length !== 0 && (
        <Text subtitle class="xl:mt-3">
          {subtitle.join(" \\ ")}
        </Text>
      )
    }
    <Text
      class={`${publishingDate ? "mt-4" : renderedContent || Astro.slots.has("title") ? "mt-6" : ""} text-xl 2xl:text-3xl ${container ? "max-h-[32rem]" : readMoreLink ? "h-64" : ""}`}
      markdown={typeof renderedContent === "function"}
      tag={tag ?? (container ? "div" : undefined)}
      >{
        typeof renderedContent === "function" ? (
          <PostContent Content={renderedContent} />
        ) : (
          (renderedContent ?? <slot />)
        )
      }</Text
    >
  </div>
  {
    Astro.slots.has("footer") && (
      <Text subtitle class="mt-6" tag="div">
        <slot name="footer" />
      </Text>
    )
  }
</div>{
  cover && (
    <div
      class={`absolute inset-0 pointer-events-none opacity-0 intersect:opacity-15 intersect-half duration-700 ${container ? "group-hover/container-card:opacity-15" : "group-hover/card:opacity-15"}`}
    >
      <Media src={cover} alt={getCoverAlt(entry!)} smoothLoading />
    </div>
  )
}{
  readMoreLink && (
    <Button
      cardButton
      class={`${readMoreClass} absolute bottom-0 left-0 h-24 2xl:h-32`}
      href={readMoreLink}
      navigate
    >
      <div
        class={`size-full flex flex-col justify-end pb-5 ${container ? "group-hover/container-card:animate-pulse" : "group-hover/card:animate-pulse"} intersect:animate-pulse lg:intersect:animate-none intersect-full`}
      >
        {readMoreText ??
          (isMarkdown
            ? `Read in ${dayjs.duration({ minutes: Math.max(Math.round(minutesToRead!), 1) }).format("m")} min`
            : "Read more")}
        <br />â–¼
      </div>
    </Button>
  )
}
