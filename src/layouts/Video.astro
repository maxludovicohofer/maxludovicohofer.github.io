---
import type { ComponentProps } from "astro/types";

interface Props {
  youTubeInfo?: { id: string; aspect: "16/9" | "16/10" };
  color?: "red" | "white";
  autoplay?: boolean;
  mute?: boolean;
  loop?: boolean;
  className?: string;
  trackTime?: boolean;
}

const {
  youTubeInfo = { id: "", aspect: "16/9" } satisfies ComponentProps<
    typeof Video
  >["youTubeInfo"],
  color = "white",
  autoplay,
  mute = true,
  loop = true,
  className = "",
  trackTime,
} = Astro.props;

const noControls = className.includes("pointer-events-none");
const aspect =
  youTubeInfo.aspect === "16/10" ? "aspect-[16/10]" : "aspect-video";

const boolToInt = (value?: boolean) => (value ? 1 : 0);
---

<div
  class={`size-full overflow-hidden flex items-center justify-center ${aspect}`}
>
  <div class="absolute size-full">
    <div
      id={`yt-player/${youTubeInfo.id}`}
      class={`yt-player/color/${color}/autoplay/${boolToInt(autoplay)}/mute/${boolToInt(mute)}/loop/${boolToInt(loop)}/controls/${boolToInt(!noControls)}/disablekb/${boolToInt(noControls)} size-full ${className} ${aspect} ${trackTime ? "current-time-0" : ""}`}
    >
    </div>
  </div>
</div>
<script>
  //? Init divs for iframe and resize dynamically
  document.addEventListener("astro:page-load", () => {
    const observer = new ResizeObserver((entries) =>
      entries.forEach(({ target }) => {
        const containerAspectRatio = target.clientWidth / target.clientHeight;
        const videoAspectEnum = Array.from(target.classList)
          .find((part) => part.startsWith("aspect"))!
          .split("-")
          .at(-1)!
          .replace(/[\[\]']+/g, "");
        const videoAspectRatio = videoAspectEnum === "16/10" ? 16 / 10 : 16 / 9;
        const containerIsWider = containerAspectRatio > videoAspectRatio;

        const resizingDiv = target.firstElementChild! as HTMLDivElement;

        const resizeWidth = ["h-auto"];
        const resizeHeight = ["w-auto"];
        resizingDiv.classList.remove(...resizeWidth, ...resizeHeight);
        resizingDiv.classList.add(
          ...(containerIsWider ? resizeWidth : resizeHeight)
        );

        const iFrame = resizingDiv.firstElementChild! as HTMLIFrameElement;

        const expandWidth = ["h-[300vw]", "w-full"];
        const expandHeight = ["h-full", "w-[300vh]"];
        iFrame.classList.remove(...expandWidth, ...expandHeight);
        iFrame.classList.add(
          ...(containerIsWider ? expandWidth : expandHeight)
        );
      })
    );

    document
      .querySelectorAll<HTMLDivElement>("div[class^=yt-player]")
      .forEach((div, key) => {
        // Assign unique IDs
        div.id = `${div.id}/${key}`;

        // Remove black bands
        if (!div.classList.contains("object-cover")) return;
        observer.observe(div.parentElement!.parentElement!);
      });
  });
</script>
<script is:inline src="https://www.youtube.com/iframe_api" defer></script>
<script is:inline>
  //? Control player
  function onYouTubeIframeAPIReady() {
    const iFrameToPlayer = {};

    const getVideoId = (iFrameId) => iFrameId.split("/").at(1);

    document.addEventListener("astro:page-load", () => {
      //? Pause video when not looking
      const observer = new IntersectionObserver((entries) =>
        entries.forEach((entry) => {
          const player = iFrameToPlayer[entry.target.id];
          if (entry.isIntersecting) player.playVideo();
          else player.pauseVideo();
        })
      );

      document.querySelectorAll("div[class^=yt-player]").forEach((div) => {
        const iFrameId = div.id;
        const videoId = getVideoId(iFrameId);
        const [color, autoplay, mute, loop, controls, disablekb] =
          div.classList[0]
            .split("/")
            .slice(1)
            .filter((_, index) => index % 2 === 1);

        const player = new YT.Player(div, {
          videoId,
          width: 0,
          height: 0,
          playerVars: {
            playlist: videoId,
            color,
            autoplay,
            mute,
            loop,
            controls,
            disablekb,
            start: sessionStorage.getItem(`video/${videoId}`),
          },
          events: {
            onReady: ({ target }) => {
              iFrameToPlayer[iFrameId] = target;
              const iFrame = target.getIframe();
              observer.observe(iFrame);

              if (!iFrame.className.includes("current-time")) return;
              setInterval(
                () =>
                  (iFrame.className = iFrame.className.replace(
                    /current-time-\d+/,
                    `current-time-${target.getCurrentTime().toFixed()}`
                  )),
                1000
              );
            },
          },
        });
      });
    });

    //? Save times to restore start times
    const savePlayerTimes = () => {
      const videoData = Object.groupBy(
        Object.entries(iFrameToPlayer),
        ([iFrameId]) => getVideoId(iFrameId)
      );

      // Save longest time watched
      for (const videoId in videoData) {
        const players = videoData[videoId];

        players.sort(
          ([, playerA], [, playerB]) =>
            playerB.getCurrentTime() - playerA.getCurrentTime()
        );

        sessionStorage.setItem(
          `video/${videoId}`,
          players[0][1].getCurrentTime().toFixed()
        );
      }
    };

    document.addEventListener("astro:before-swap", savePlayerTimes);
    addEventListener("beforeunload", savePlayerTimes);
  }
</script>
