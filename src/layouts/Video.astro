---
interface Props {
  youTubeID?: string;
  color?: "red" | "white";
  autoplay?: boolean;
  mute?: boolean;
  loop?: boolean;
  className?: string;
  noControls?: boolean;
  iframeClassName?: string;
}

const {
  youTubeID = "",
  color = "white",
  autoplay = false,
  mute = true,
  loop = true,
  className = "",
  noControls,
  iframeClassName,
} = Astro.props;

const boolToInt = (value?: boolean) => (value ? 1 : 0);
---

<div
  class={`${className} size-full aspect-video overflow-hidden ${noControls ? "pointer-events-none" : ""}`}
>
  <div
    id={`yt-player/${youTubeID}`}
    class={`yt-player/color/${color}/autoplay/${boolToInt(autoplay)}/mute/${boolToInt(mute)}/loop/${boolToInt(loop)}/controls/${boolToInt(!noControls)}/disablekb/${boolToInt(noControls)} ${iframeClassName} ${noControls ? "!w-[300%] !h-full !ml-[-100%]" : "!size-full"}`}
  >
  </div>
</div>
<script>
  //? Assign unique IDs
  document.addEventListener("astro:page-load", () =>
    document
      .querySelectorAll<HTMLDivElement>("div[class^=yt-player]")
      .forEach((div, key) => (div.id = `${div.id}/${key}`))
  );
</script>
<script is:inline src="https://www.youtube.com/iframe_api" defer></script>
<script is:inline>
  //? Control player
  function onYouTubeIframeAPIReady() {
    const iframeToPlayer = {};

    document.addEventListener("astro:page-load", () => {
      //? Pause video when not looking
      const observer = new IntersectionObserver((entries) =>
        entries.forEach((entry) => {
          const player = iframeToPlayer[entry.target.id];
          if (entry.isIntersecting) player.playVideo();
          else player.pauseVideo();
        })
      );

      document.querySelectorAll("div[class^=yt-player]").forEach((div) => {
        // TODO ADD H-300 OR W-FULL BASED ON ASPECT RATIO OF VIDEO RELATIVE TO ASPECT RATIO OF DIV
        const iframeId = div.id;
        const videoId = iframeId.split("/").at(1);
        const [color, autoplay, mute, loop, controls, disablekb] =
          div.classList[0]
            .split("/")
            .slice(1)
            .filter((_, index) => index % 2 === 1);

        const player = new YT.Player(div, {
          videoId,
          playerVars: {
            playlist: videoId,
            color,
            autoplay,
            mute,
            loop,
            controls,
            disablekb,
            start: sessionStorage.getItem(iframeId),
          },
          events: {
            onReady: ({ target }) => {
              iframeToPlayer[iframeId] = target;
              observer.observe(target.getIframe());
            },
          },
        });
      });
    });

    //? Save times to restore start times
    const savePlayerTimes = () =>
      Object.entries(iframeToPlayer).forEach(([iframeId, player]) =>
        sessionStorage.setItem(iframeId, player.getCurrentTime().toFixed())
      );
    document.addEventListener("astro:before-swap", savePlayerTimes);
    addEventListener("beforeunload", savePlayerTimes);
  }
</script>
