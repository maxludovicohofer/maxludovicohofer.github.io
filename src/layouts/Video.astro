---
import type { ComponentProps } from "astro/types";

interface Props {
  youTubeInfo?: { id: string; aspect: "16/9" | "16/10" };
  color?: "red" | "white";
  autoplay?: boolean;
  mute?: boolean;
  loop?: boolean;
  className?: string;
  noControls?: boolean;
  noBlackBands?: boolean;
  iframeClassName?: string;
}

const {
  youTubeInfo = { id: "", aspect: "16/9" } satisfies ComponentProps<
    typeof Video
  >["youTubeInfo"],
  color = "white",
  autoplay,
  mute = true,
  loop = true,
  className = "",
  noControls,
  noBlackBands,
  iframeClassName = "",
} = Astro.props;

const boolToInt = (value?: boolean) => (value ? 1 : 0);
---

<div
  class={`${className} size-full flex items-center justify-center ${youTubeInfo.aspect === "16/10" ? "aspect-[16/10]" : "aspect-video"} ${noBlackBands ? "overflow-hidden" : ""} ${noControls ? "pointer-events-none" : ""}`}
>
  <div
    id={`yt-player/${youTubeInfo.id}`}
    class={`yt-player/color/${color}/autoplay/${boolToInt(autoplay)}/mute/${boolToInt(mute)}/loop/${boolToInt(loop)}/controls/${boolToInt(!noControls)}/disablekb/${boolToInt(noControls)} ${iframeClassName} ${noBlackBands ? "no-black-bands" : "size-full"}`}
  >
  </div>
</div>
<script>
  //? Init divs for iframe and resize dynamically
  document.addEventListener("astro:page-load", () => {
    const observer = new ResizeObserver((entries) =>
      entries.forEach(({ target }) => {
        const videoAspectEnum = target.classList
          .values()
          .find((part) => part.startsWith("aspect"))!
          .split("-")
          .at(-1)!
          .replace(/[\[\]']+/g, "");
        const videoAspectRatio = videoAspectEnum === "16/10" ? 16 / 10 : 16 / 9;

        const widthResize = ["w-full"];
        const heightResize = ["h-full"];

        if (target.classList.contains("absolute")) {
          //? Special logic for absolute
          widthResize.push("h-auto", "top-0", "bottom-0", "my-auto");
          heightResize.push("w-auto", "top-0");

          target.classList.remove(...widthResize, ...heightResize);
          target.classList.add(
            //? Only works for aspect ratios > 1
            ...(target.clientWidth / target.clientHeight > videoAspectRatio
              ? widthResize
              : heightResize)
          );
        } else {
          const iFrame = target.firstElementChild! as HTMLIFrameElement;

          iFrame.classList.remove(...widthResize, ...heightResize);
          iFrame.classList.add(
            //? Only works for aspect ratios > 1
            ...(target.clientWidth / target.clientHeight > videoAspectRatio
              ? widthResize
              : heightResize)
          );
        }
      })
    );

    document
      .querySelectorAll<HTMLDivElement>("div[class^=yt-player]")
      .forEach((div, key) => {
        // Assign unique IDs
        div.id = `${div.id}/${key}`;

        // Remove black bands
        if (!div.classList.contains("no-black-bands")) return;
        observer.observe(div.parentElement!);
      });
  });
</script>
<script is:inline src="https://www.youtube.com/iframe_api" defer></script>
<script is:inline>
  //? Control player
  function onYouTubeIframeAPIReady() {
    const iframeToPlayer = {};

    document.addEventListener("astro:page-load", () => {
      //? Pause video when not looking
      const observer = new IntersectionObserver((entries) =>
        entries.forEach((entry) => {
          const player = iframeToPlayer[entry.target.id];
          if (entry.isIntersecting) player.playVideo();
          else player.pauseVideo();
        })
      );

      document.querySelectorAll("div[class^=yt-player]").forEach((div) => {
        const iframeId = div.id;
        const videoId = iframeId.split("/").at(1);
        const [color, autoplay, mute, loop, controls, disablekb] =
          div.classList[0]
            .split("/")
            .slice(1)
            .filter((_, index) => index % 2 === 1);

        const player = new YT.Player(div, {
          videoId,
          width: 10 * screen.width,
          height: 10 * screen.height,
          playerVars: {
            playlist: videoId,
            color,
            autoplay,
            mute,
            loop,
            controls,
            disablekb,
            start: sessionStorage.getItem(iframeId),
          },
          events: {
            onReady: ({ target }) => {
              iframeToPlayer[iframeId] = target;
              observer.observe(target.getIframe());
            },
          },
        });
      });
    });

    //? Save times to restore start times
    const savePlayerTimes = () =>
      Object.entries(iframeToPlayer).forEach(([iframeId, player]) =>
        sessionStorage.setItem(iframeId, player.getCurrentTime().toFixed())
      );
    document.addEventListener("astro:before-swap", savePlayerTimes);
    addEventListener("beforeunload", savePlayerTimes);
  }
</script>
