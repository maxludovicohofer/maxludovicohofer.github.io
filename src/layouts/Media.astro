---
import type { getPostCover, imageExtensions } from "@layouts/Post/Post.astro";
import { Image, type ImgAttributes } from "astro:assets";
import type { ComponentProps } from "astro/types";
import NewVideo from "./NewVideo.astro";

interface MarkdownImage {
  src: string;
  width: number;
  height: number;
  format: (typeof imageExtensions)[number];
}

interface Props {
  src: NonNullable<ReturnType<typeof getPostCover>> | MarkdownImage;
  alt: string;
  loading?: ImgAttributes["loading"];
}

const { src, alt, loading = "lazy" } = Astro.props;

export function isVideo(
  video: typeof src
): video is NonNullable<ComponentProps<typeof NewVideo>["youTubeInfo"]> {
  return !!(video as ComponentProps<typeof NewVideo>["youTubeInfo"])?.id;
}

function isMarkdownImage(image: typeof src): image is MarkdownImage {
  return !!(image as MarkdownImage).src;
}

const mediaClass = "size-full object-cover pointer-events-none";
---

{
  isVideo(src) ? (
    <NewVideo youTubeInfo={src} className={mediaClass} trackTime />
  ) : (
    <Image
      src={isMarkdownImage(src) ? src : src()}
      alt={alt}
      class={mediaClass}
      loading={loading}
    />
  )
}
