---
import Page from "@layouts/Page.astro";
import type { ComponentProps } from "astro/types";
import Document, {
  getDescription,
  getEntryId,
  type DocumentCollectionKey,
} from "./Document.astro";
import type { GetStaticPathsResult } from "astro";
import { getStaticPaths as getBasePaths } from "@pages/index.astro";
import {
  getAllDocuments,
  getUniqueEntries,
  getLocalizedEntries,
  isLocalizedEntry,
} from "@integrations/astro-server";
import { getLocaleFromPath } from "@integrations/i18n";
import { getTitle } from "@integrations/content";
import "@fontsource-variable/noto-sans";
import "@fontsource-variable/noto-sans-jp";
import "@fontsource-variable/noto-emoji";
import "@fontsource/noto-sans-symbols-2";

interface Props extends ComponentProps<typeof Document> {}

// prettier-ignore
export const mergePaths = <B extends GetStaticPathsResult,P extends GetStaticPathsResult>(
  basePaths: B,
  paths: P
) => {
  return basePaths.flatMap((base) =>
    paths.map((path) => ({
      params: { ...(base.params as B[number]["params"]), ...(path.params as P[number]["params"]) },
      props: { ...(base.props as P[number]["props"]), ...(path.props as P[number]["props"]) },
    }))
  );
};

// Generate a new path for every collection entry
export const makeDocumentPaths =
  <C extends DocumentCollectionKey>(collection: C) =>
  async () => {
    const allDocuments = await getAllDocuments(collection);

    const paths = mergePaths(
      await getBasePaths(),
      getUniqueEntries(allDocuments).map((entry) => ({
        params: { id: getEntryId(entry) },
        props: { entry },
      }))
    ).map((pathInfo) => {
      const locale =
        pathInfo.params.path !== undefined
          ? getLocaleFromPath(pathInfo.params.path)
          : undefined;

      return {
        ...pathInfo,
        props: {
          ...pathInfo.props,
          entry: getLocalizedEntries(
            pathInfo.props.entry,
            allDocuments,
            locale
          ),
        },
      };
    });

    return paths;
  };

const { entry } = Astro.props;

const noTranslation = isLocalizedEntry(entry);
---

<Page
  title={getTitle(entry)}
  description={getDescription(entry, 2)}
  noTranslation={noTranslation}
  ><Document
    markdown
    class="font-['Noto_Sans_Variable','Noto_Sans_JP_Variable','Noto_Emoji_Variable','Noto_Sans_Symbols_2']"
    {...Astro.props}><slot /></Document
  ></Page
>
