---
import type { CollectionKey, CollectionEntry } from "astro:content";
import { cleanMarkdown } from "@integrations/markdown";
import { endDot, capitalize, getPathSection } from "@integrations/text";
import type { PostCollectionKey } from "@integrations/content";
import type { ComponentProps } from "astro/types";
import Card from "@layouts/Card.astro";
import DocumentText from "./DocumentText.astro";
import PostText from "@post/PostText.astro";
import { isLocalizedEntry, getEntryLocale } from "@integrations/astro-server";
import { defaultLocale } from "@integrations/astro-config.mjs";
import { localeInfo } from "@integrations/i18n-special";

interface Props
  extends ComponentProps<typeof DocumentText>,
    ComponentProps<typeof PostText> {
  inline?: boolean;
}

const { inline, entryProps, ...props } = Astro.props;

// prettier-ignore
export type DocumentCollectionKey = Extract<CollectionKey, "docs" | PostCollectionKey>;

export const getEntryId = <C extends CollectionKey>(
  entry: CollectionEntry<C> | string
) => {
  const id = typeof entry === "string" ? entry : entry?.id;

  return id && getPathSection(id);
};

export const getDescription = <C extends CollectionKey>(
  entry?: CollectionEntry<C>,
  sentences?: number,
  shortenStart?: boolean,
  startHeading?: string
) => {
  let description: string | undefined;

  if (!entry?.body) return;

  const cleanBody = entry.body.trimStart();

  if (startHeading || cleanBody.startsWith("#") || cleanBody.startsWith("![")) {
    description = cleanBody.split(
      startHeading ? new RegExp(`# ${startHeading}\\s+`) : /#.*/
    )[1];
  }

  description = description && cleanMarkdown(description);

  if (sentences) {
    const splitSentences = (description ?? cleanMarkdown(cleanBody)).split(
      new RegExp(
        `[${localeInfo[isLocalizedEntry(entry) ? getEntryLocale(entry) : defaultLocale].delimiters}]\\s+`
      )
    );

    description = endDot(`${splitSentences.slice(0, sentences).join(". ")}`);
  }

  if (shortenStart) {
    //! Try to shorten sentence, could lead to errors
    //! Also, uses lookbehind, which could not be supported
    const shortenedStart = (description ?? cleanMarkdown(cleanBody)).split(
      /(?<!,.*)( is an | is a | is | was an | was a | was )/
    )[2];

    if (shortenedStart) description = capitalize(shortenedStart);
  }

  return description;
};

const noTranslation = isLocalizedEntry(props.entry);

const textProps: Props = {
  ...props,
  entryProps: {
    ...((noTranslation ? { noTranslation } : {}) satisfies Partial<
      Props["entryProps"]
    >),
    ...entryProps,
  },
};
---

{
  inline ? (
    <PostText {...textProps}>
      <slot />
    </PostText>
  ) : (
    <Card class="min-h-dvh rounded-none shadow-none">
      <DocumentText {...textProps}>
        <slot />
      </DocumentText>
    </Card>
  )
}
