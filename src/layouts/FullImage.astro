---
import type { ComponentProps } from "astro/types";
import { Image } from "astro:assets";
import Button from "./Button.astro";

interface Props {
  src?: Exclude<ComponentProps<typeof Image>["src"], string>;
  alt?: string;
  className?: string;
  imageClassName?: string;
  loading?: ComponentProps<typeof Image>["loading"];
}

const { src, alt, className, imageClassName, loading } = Astro.props;
---

{
  src && (
    <Button
      noFocus
      fullHeight
      className={`can-fullscreen ${className} !bg-transparent`}
    >
      <Image src={src} class={imageClassName} alt={alt} loading={loading} />
    </Button>
  )
}
<script>
  const activateModal = (content: Node) => {
    const modalSlot = document.querySelector<HTMLDivElement>("div.modal-slot")!;

    modalSlot.className = `${modalSlot.className} !pointer-events-auto`;

    const backdrop = modalSlot.firstElementChild!;
    backdrop.className = `${backdrop.className} !opacity-100`;

    const backButton = modalSlot.lastElementChild!;
    backButton.className = `${backButton.className} !opacity-100`;

    const modal = backButton.previousElementSibling!.firstElementChild!;
    modal.append(content);
  };

  document.addEventListener("astro:page-load", () =>
    document
      .querySelectorAll<HTMLButtonElement>("button.can-fullscreen")
      ?.forEach((fullImage) =>
        fullImage.addEventListener("click", () => {
          const modalImage = fullImage.cloneNode(true) as HTMLElement;

          modalImage.className = `${modalImage.className} !visible !opacity-100 !size-auto hover:!scale-100 active:!scale-100 !max-w-none !relative !inset-0 !m-0 flex flex-col items-center justify-center`;

          modalImage.firstElementChild!.className = `${modalImage.firstElementChild!.className} !h-screen !w-auto !object-cover !max-h-[85vh] !max-w-[85vw] rounded-3xl`;

          activateModal(modalImage);
        })
      )
  );
</script>
