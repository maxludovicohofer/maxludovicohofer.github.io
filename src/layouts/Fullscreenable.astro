---
import Button from "./Button.astro";

interface Props {
  className?: string;
}

const { className = "" } = Astro.props;
---

<Button
  noFocus
  noRounding
  fullHeight
  className={`can-fullscreen ${className} flex items-center justify-center overflow-hidden !bg-transparent`}
  ><slot /></Button
>
<script>
  import type { LiteYTEmbed } from "lite-youtube-embed";
  import {
    activateModal,
    removeFromClasses,
    getTailwindValue,
    switchClasses,
  } from "src/utils";

  function setFullscreenMedia(this: HTMLButtonElement) {
    const modal = document.querySelector<HTMLDivElement>("div.modal")!;

    if (modal.childElementCount) return;

    const fullscreenMedia = this.querySelector(
      "img, video, iframe, lite-youtube"
    )?.cloneNode(true) as
      | HTMLImageElement
      | HTMLVideoElement
      | HTMLIFrameElement
      | LiteYTEmbed
      | undefined;

    if (!fullscreenMedia) return;

    fullscreenMedia.className = removeFromClasses(fullscreenMedia.className, [
      "size",
      "w",
      "h",
      "pointer-events",
      "object",
    ]);

    if (
      fullscreenMedia.tagName === "IFRAME" ||
      fullscreenMedia.tagName === "LITE-YOUTUBE"
    ) {
      const videoAspectEnum = getTailwindValue(fullscreenMedia, "aspect");
      const aspectRatio = videoAspectEnum === "16/10" ? 16 / 10 : 16 / 9;

      // Adapt to modal slot
      const observer = new ResizeObserver((entries) =>
        entries.forEach(({ target }) =>
          switchClasses(
            fullscreenMedia,
            target.clientWidth / target.clientHeight > aspectRatio,
            ["h-[90dvh]", "lg:h-[80dvh]"],
            ["w-[90dvw]", "lg:w-[80dvw]"]
          )
        )
      );

      observer.observe(
        document.querySelector<HTMLDivElement>("div.modal-slot")!
      );

      const iframe =
        fullscreenMedia.tagName === "LITE-YOUTUBE"
          ? fullscreenMedia.querySelector("iframe")!
          : (fullscreenMedia as HTMLIFrameElement);

      const startTime = getTailwindValue(fullscreenMedia, "current-time");

      if (startTime) {
        iframe.src = iframe.src.replace(/start=\d+/, `start=${startTime}`);
      }

      iframe.src = iframe.src
        .replace("controls=0", "controls=1")
        .replace("disablekb=1", "disablekb=0")
        .replace("autoplay=0", "autoplay=1");
    } else {
      fullscreenMedia.classList.add("size-full");
    }

    activateModal(fullscreenMedia);
  }

  document.addEventListener("astro:page-load", () =>
    document
      .querySelectorAll<HTMLButtonElement>("button.can-fullscreen")
      .forEach((fullImage) =>
        fullImage.addEventListener("click", setFullscreenMedia)
      )
  );

  document.addEventListener("astro:before-swap", () =>
    document
      .querySelectorAll<HTMLButtonElement>("button.can-fullscreen")
      .forEach((fullImage) =>
        fullImage.removeEventListener("click", setFullscreenMedia)
      )
  );
</script>
