---
import Button from "./Button.astro";

interface Props {
  className?: string;
}

const { className = "" } = Astro.props;
---

<Button
  noFocus
  noRounding
  fullHeight
  className={`can-fullscreen ${className} flex items-center justify-center overflow-hidden !bg-transparent`}
>
  <slot />
</Button>
<script>
  const activateModal = (content: Node) => {
    const modalSlot = document.querySelector<HTMLDivElement>("div.modal-slot")!;

    modalSlot.className = `${modalSlot.className} !pointer-events-auto`;

    const backdrop = modalSlot.querySelector("div.modal-back")!;
    backdrop.className = `${backdrop.className} !opacity-100`;

    const backButton = modalSlot.querySelector("button.modal-back")!;
    backButton.className = `${backButton.className} !opacity-100`;

    const modal = modalSlot.querySelector("div.modal")!;
    modal.append(content);
  };

  document.addEventListener("astro:page-load", () =>
    document
      .querySelectorAll<HTMLButtonElement>("button.can-fullscreen")
      ?.forEach((fullImage) =>
        fullImage.addEventListener("click", () => {
          const fullscreenMedia = fullImage
            .querySelector("img, iframe, video")!
            .cloneNode(true) as
            | HTMLImageElement
            | HTMLVideoElement
            | HTMLIFrameElement;

          const cleanClass = (className: string) =>
            className.replace(
              /(^|\s)(\S*-)*(size-|w-|h-|pointer-events-|object-)\S*/g,
              ""
            );

          fullscreenMedia.className = cleanClass(fullscreenMedia.className);

          if (fullscreenMedia.tagName === "IFRAME") {
            const videoAspectEnum = Array.from(fullscreenMedia.classList)
              .find((part) => part.startsWith("aspect"))
              ?.split("-")
              .at(-1)!
              .replace(/[\[\]']+/g, "");
            const aspectRatio = videoAspectEnum === "16/10" ? 16 / 10 : 16 / 9;

            const modalSlot =
              document.querySelector<HTMLDivElement>("div.modal-slot")!;

            const expandWidth = ["h-[90vh]", "lg:h-[80vh]"];
            const expandHeight = ["w-[90vw]", "lg:w-[80vw]"];

            fullscreenMedia.classList.add(
              ...(modalSlot.clientWidth / modalSlot.clientHeight > aspectRatio
                ? expandWidth
                : expandHeight)
            );

            fullscreenMedia.src = fullscreenMedia.src
              .replace("autoplay=1", "autoplay=0")
              .replace("mute=1", "mute=0")
              .replace("controls=0", "controls=1")
              .replace("disablekb=1", "disablekb=0");

            // TODO SET CORRECT START TIME

            new YT.Player(fullscreenMedia, {
              events: {
                onReady: ({ target }) => {
                  target.playVideo();
                  // fullscreenMedia.src = fullscreenMedia.src
                  //   .replace(
                  //     /start=\d+/,
                  //     `start=${target.getCurrentTime().toFixed()}`
                  //   )
                  //   .replace("autoplay=0", "autoplay=1")
                  //   .replace("mute=1", "mute=0")
                  //   .replace("controls=0", "controls=1")
                  //   .replace("disablekb=1", "disablekb=0");
                },
              },
            });

            // TODO ADD CONTROLS AND PLAY VIDEO
          }

          activateModal(fullscreenMedia);
        })
      )
  );
</script>
