---
import type { ComponentProps } from "astro/types";
import Fullscreenable from "@ui/Fullscreenable.astro";
import Dissolving from "@ui/Dissolving.astro";
import Media from "@ui/Media.astro";
import Text from "@ui/Text.astro";
import Link from "@ui/Link.astro";

interface Props extends ComponentProps<typeof Media> {
  noMargin?: boolean;
  marginClass?: string;
}

const {
  class: className = "",
  "data-umami-event": umamiEvent,
  alt,
  noMargin,
  marginClass = "",
  ...props
} = Astro.props;

// Check if hidden text
const [descriptiveAlt, hiddenAlt] = alt.split("HIDDEN ");
// This alt is present even if there is no description, useful for event name and screen reader alt
const realAlt = (hiddenAlt || descriptiveAlt!).trim();

// Check for links in alt
const textAlt = [realAlt];
const links: ComponentProps<typeof Link>[] = [];

const altLinks = textAlt
  .at(-1)!
  .match(
    /https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,4}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/g
  );

const linkTextBeforeRegex = /\[.*\($/;
const linkTextAfterRegex = /^\)]/;

altLinks?.forEach((altLink) => {
  links.push({ href: altLink });

  // Check for link text
  const [altBeforeLink, altAfterLink] = textAlt.at(-1)!.split(altLink);
  if (!altAfterLink || !altAfterLink.match(linkTextAfterRegex)) return;

  const linkTextPosition = altBeforeLink!.search(linkTextBeforeRegex);
  if (linkTextPosition === -1) return;

  const linkText = altBeforeLink!.slice(linkTextPosition).slice(1, -1);

  links.push({ ...links.pop(), slot: linkText });

  textAlt.pop();
  textAlt.push(
    altBeforeLink!.replace(linkTextBeforeRegex, ""),
    altAfterLink!.replace(linkTextAfterRegex, "")
  );
});

const stringAlt = textAlt.reduce(
  (joined, toJoin, index) =>
    `${joined}${index !== 0 ? links[index - 1]!.slot : ""}${toJoin}`,
  ""
);
---

<Dissolving class={`${marginClass} ${noMargin ? "" : "mt-12 mb-11"}`}
  ><Fullscreenable
    class={`${className} rounded-3xl ${descriptiveAlt ? "-mb-2" : ""}`}
    data-umami-event={umamiEvent ?? stringAlt}
    ><Media alt={stringAlt} {...props} /></Fullscreenable
  >{
    descriptiveAlt && (
      <Text subtitle class="-mb-4">
        {textAlt.length === 1
          ? textAlt[0]
          : textAlt.map((text, index) => (
              <>
                {index !== 0 && (
                  <Link {...links[index - 1]}>{links[index - 1]!.slot}</Link>
                )}
                <Text tag="span" subtitle>
                  {text}
                </Text>
              </>
            ))}
      </Text>
    )
  }</Dissolving
>
