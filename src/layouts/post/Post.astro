---
import Text from "@ui/Text.astro";
import type { CollectionEntry } from "astro:content";
import { render } from "astro:content";
import Card from "@layouts/Card.astro";
import type { ComponentProps, HTMLAttributes } from "astro/types";
import CoverMedia from "@post/CoverMedia.astro";
import Link from "@ui/Link.astro";
import Button from "@ui/Button.astro";
import Document from "@document/Document.astro";
import { getLinkName } from "@integrations/text";
import {
  getTitle,
  getPublishingDate,
  getPostCover,
  getCategory,
  getDownloadLinks,
  type PostCollectionKey,
} from "@integrations/content";

interface Props extends HTMLAttributes<"div"> {
  entry?: CollectionEntry<PostCollectionKey>;
  tag?: ComponentProps<typeof Document>["tag"];
  fullWidth?: boolean | undefined;
  fullWidthAfter?: boolean | undefined;
  inline?: boolean | undefined;
  container?: boolean;
}

const {
  entry,
  tag,
  fullWidth,
  fullWidthAfter,
  inline,
  container,
  class: className = "",
  ...props
} = Astro.props;

const { Content, remarkPluginFrontmatter } = entry ? await render(entry) : {};

const title = getTitle(entry);
const publishingDate = getPublishingDate(
  entry,
  remarkPluginFrontmatter
)?.format("D MMMM YYYY");
const cover = getPostCover(entry);
const downloadLinks = getDownloadLinks(entry);
const category = getCategory(entry);
const action = category === "Published tool" ? "Try" : "Play";

const fullWidthClass = `w-full ${inline ? "" : "pb-24 lg:pb-10"}`;

const widthClass = `${fullWidthClass} px-6 ${fullWidth ? "lg:px-24" : "max-w-[40rem] 2xl:max-w-[70rem]"}`;
const buttonWidthClass = "max-w-[25rem] 2xl:max-w-[40rem]";
---

{
  cover && (
    <div class="lg:hidden fixed left-0 right-0 mx-auto">
      <CoverMedia cover={cover} entry={entry!} class="h-[55vh] -mt-[39vh]" />
    </div>
  )
}
<Card
  unstyled
  class={cover ? "rounded-t-3xl lg:rounded-none mt-[26vh] lg:mt-0" : ""}
>
  <div class="flex flex-col items-center">
    <div
      class={`flex flex-col items-center w-full ${container ? "bg-zinc-200 dark:bg-zinc-950" : "bg-gradient-to-b from-zinc-100 dark:from-zinc-900 to-zinc-200 dark:to-zinc-950"} `}
    >
      <div
        class={`${className} ${widthClass} ${inline ? "" : "pt-7 lg:pt-12"} ${Astro.slots.has("after") ? "!pb-0" : ""}`}
        {...props}
      >
        {
          cover && (
            <div class="hidden lg:inline">
              <CoverMedia cover={cover} entry={entry!} class="h-[40vh] mb-6" />
            </div>
          )
        }
        {
          (Astro.slots.has("header") || entry?.data.draft) && (
            <Text subtitle tag="div">
              {entry?.data.draft ? (
                "Draft (not visible in production)"
              ) : (
                <slot name="header" />
              )}
            </Text>
          )
        }
        <Text tag={container ? "h2" : "h1"}
          ><slot name="title">{title}</slot></Text
        >
        {category && <Text subtitle>{category}</Text>}
        <Document
          inline
          entry={entry}
          tag={tag}
          class={`${Content ? "is-entry" : ""} ${publishingDate ? "mt-4" : "mt-6"}`}
          ><slot /></Document
        >
        {
          downloadLinks && (
            <div class="flex flex-col items-center mt-8 mb-7">
              <Button
                href={downloadLinks[0]}
                importance="p"
                linkClass={buttonWidthClass}
              >
                <div class="group-hover:animate-pulse">{action}</div>
              </Button>
              {downloadLinks.length > 1 && (
                <Text subtitle class={`-mb-4 w-full ${buttonWidthClass}`}>
                  Or
                  {downloadLinks.slice(1).map((link, index, { length }) => (
                    <>
                      <Link href={link}>{getLinkName(link)}</Link>
                      {index !== length - 1 ? ", " : ""}
                    </>
                  ))}
                </Text>
              )}
            </div>
          )
        }
        {
          Astro.slots.has("footer") && (
            <Text subtitle tag="div" class="mt-2 mb-1.5 2xl:-mb-1">
              <slot name="footer" />
            </Text>
          )
        }
        {
          publishingDate && (
            <Text subtitle class="mt-0.5 2xl:mt-3">
              {publishingDate}
            </Text>
          )
        }
      </div>
    </div>
    {
      Astro.slots.has("after") && (
        <Text
          subtitle
          tag="div"
          class={fullWidthAfter ? fullWidthClass : widthClass}
        >
          <slot name="after" />
        </Text>
      )
    }
  </div>
</Card>
<script>
  import type { CollectionKey } from "astro:content";

  //? Save read entries
  document.addEventListener("astro:page-load", () => {
    if (!document.querySelector(".is-entry")) return;

    const readEntriesString = localStorage.getItem("readEntries");

    const readEntries: Partial<Record<CollectionKey, string[]>> =
      readEntriesString ? JSON.parse(readEntriesString) : {};

    const [collection, slug] = location.pathname
      .split("/")
      .filter((part) => !!part)
      .slice(-2) as [CollectionKey, string];

    if (readEntries[collection]?.includes(slug)) {
      // Reorder
      readEntries[collection].splice(readEntries[collection].indexOf(slug), 1);
    }

    // Saved ordered by latest first
    localStorage.setItem(
      "readEntries",
      JSON.stringify({
        ...readEntries,
        [collection]: [slug, ...(readEntries[collection] ?? [])],
      })
    );
  });
</script>
