---
import Text from "@ui/Text.astro";
import type { CollectionKey, CollectionEntry } from "astro:content";
import { render } from "astro:content";
import type { ImageMetadata } from "astro";
import dayjs from "dayjs";
import duration from "dayjs/plugin/duration";
import utc from "dayjs/plugin/utc";
import Card from "@layouts/Card.astro";
import type { ComponentProps, HTMLAttributes } from "astro/types";
import CoverMedia from "@post/CoverMedia.astro";
import Link from "@ui/Link.astro";
import Button from "@ui/Button.astro";
import type Video from "@ui/Video.astro";
import {
  getLinkName,
  capitalize,
  cleanMarkdown,
  toTitleCase,
  getTextClass,
} from "@integrations/utils";
import PostContent from "./PostContent.astro";

interface Props extends HTMLAttributes<"div"> {
  entry?: CollectionEntry<PostCollectionKey>;
  tag?: ComponentProps<typeof Text>["tag"];
  fullWidth?: boolean | undefined;
  fullWidthAfter?: boolean | undefined;
  inline?: boolean | undefined;
  container?: boolean;
  importance?: Parameters<typeof getTextClass>[0] | undefined;
}

const {
  entry,
  tag,
  fullWidth,
  fullWidthAfter,
  inline,
  container,
  importance,
  class: className = "",
  ...props
} = Astro.props;

export type PostCollectionKey = Extract<CollectionKey, "projects" | "thoughts">;

const { Content, remarkPluginFrontmatter } = entry ? await render(entry) : {};

export const getPostId = (post: typeof entry) => post?.id.split("/").at(-1);

export const getTitle = (post: typeof entry) => {
  if (!post) return;

  if (post.data.title) return post.data.title;

  const rawTitle = getPostId(post)!.split("-").join(" ");
  return post.collection === "projects"
    ? toTitleCase(rawTitle)
    : capitalize(rawTitle);
};

export const getPublishingDate = (
  post: typeof entry,
  frontmatter: typeof remarkPluginFrontmatter
) => {
  if (post?.data.publishingDate) return dayjs(post.data.publishingDate);

  if (!frontmatter) return;

  dayjs.extend(utc);

  return dayjs.utc(frontmatter.created || undefined);
};

const publishingDate = getPublishingDate(
  entry,
  remarkPluginFrontmatter
)?.format("D MMMM YYYY");

const title = getTitle(entry);

export const imageExtensions = ["png", "jpg", "jpeg", "gif", "webp"] as const;

export const getPostCover = (post: typeof entry) => {
  if (!post) return;

  if (post.data.youTubeID)
    return {
      id: post.data.youTubeID,
      aspect: post.data.youTubeAspectRatio ?? "16/9",
    } satisfies ComponentProps<typeof Video>["youTubeInfo"];

  const imageFolder = `/src/data/${post.collection}/`;
  const images = import.meta.glob<{ default: ImageMetadata }>(
    "/src/data/**/*.{png,jpg,jpeg,gif,webp}"
  );
  const imagePath = `${imageFolder}${post.id}`;
  const image =
    images[
      `${imagePath}.${imageExtensions.find((extension) => images[`${imagePath}.${extension}`])}`
    ];

  if (post.collection === "projects" && !post.data.draft && !image) {
    // Projects require image
    throw new Error(
      `An image for "${imagePath}" does not exist in pattern: "${imageFolder}*.{${imageExtensions.join(",")}}". Import an image, or preferably a video.`
    );
  }

  return image;
};

const cover = getPostCover(entry);

export const getDescription = <C extends PostCollectionKey>(
  entry?: CollectionEntry<C>,
  sentences?: number,
  shortenStart?: boolean,
  startHeading?: string
) => {
  let description: string | undefined;

  if (!entry?.body) return;

  if (startHeading) {
    description = entry.body.split(new RegExp(`# ${startHeading}[\n\r\s]+`))[1];
  }

  description = description && cleanMarkdown(description);

  if (sentences) {
    const splitSentences = (description ?? cleanMarkdown(entry.body)).split(
      /\.[\n\r\s]+/
    );

    description = `${splitSentences.slice(0, sentences).join(". ")}.`;
  }

  if (shortenStart) {
    //! Try to shorten sentence, could lead to errors
    //! Also, uses lookbehind, which could not be supported
    const shortenedStart = (description ?? cleanMarkdown(entry.body)).split(
      /(?<!,.*)( is an | is a | is | was an | was a | was )/
    )[2];

    if (shortenedStart) description = capitalize(shortenedStart);
  }

  return description;
};

export const getDownloadLinks = <C extends PostCollectionKey>(
  entry?: CollectionEntry<C>
) => {
  function isDownloadableEntry<C extends PostCollectionKey>(
    entry?: CollectionEntry<C>
  ): entry is CollectionEntry<C> & { data: { downloadLinks: string[] } } {
    return !!(entry && Object.hasOwn(entry.data, "downloadLinks"));
  }

  if (!isDownloadableEntry(entry) || !entry.data.downloadLinks.length) return;

  return entry.data.downloadLinks;
};

const downloadLinks = getDownloadLinks(entry);

export const getDevelopmentTime = <C extends PostCollectionKey>(
  entry?: CollectionEntry<C>
) => {
  function isDevelopmentTimeEntry<C extends PostCollectionKey>(
    entry?: CollectionEntry<C>
  ): entry is CollectionEntry<C> & { data: { developmentTime: string } } {
    return !!(entry && Object.hasOwn(entry.data, "developmentTime"));
  }

  if (!isDevelopmentTimeEntry(entry)) return;

  dayjs.extend(duration);

  return dayjs.duration(entry.data.developmentTime);
};

type Category = NonNullable<CollectionEntry<"projects">["data"]["category"]>;

export function getCategory<C extends PostCollectionKey, F extends boolean>(
  entry?: CollectionEntry<C>,
  noFormat?: F
):
  | (F extends true ? Category : `Published ${Lowercase<Category>}` | Category)
  | undefined {
  function isCategoryEntry<C extends PostCollectionKey>(
    entry?: CollectionEntry<C>
  ): entry is CollectionEntry<C> & {
    data: { category: Category };
  } {
    return !!(entry && Object.hasOwn(entry.data, "category"));
  }

  let category = isCategoryEntry(entry) ? entry.data.category : undefined;

  if (!category) {
    const developmentTime = getDevelopmentTime(entry);

    if (!developmentTime) return;

    //? Games are assumed to be at least 1 month of development
    category = (
      developmentTime.months() ? "Game" : "Prototype"
    ) satisfies Category;
  }

  return (
    !noFormat && getDownloadLinks(entry)
      ? `Published ${category.toLowerCase()}`
      : category
  ) as any;
}

const category = getCategory(entry);

const fullWidthClass = `w-full ${inline ? "" : "pb-24 lg:pb-10"}`;

const widthClass = `${fullWidthClass} px-6 ${fullWidth ? "lg:px-24" : "max-w-[40rem] 2xl:max-w-[70rem]"}`;
const buttonWidthClass = "max-w-[25rem] 2xl:max-w-[40rem]";

const action = category === "Published tool" ? "Download" : "Play";
---

{
  cover && (
    <div class="lg:hidden fixed left-0 right-0 mx-auto">
      <CoverMedia cover={cover} entry={entry!} class="h-[55vh] -mt-[39vh]" />
    </div>
  )
}
<Card
  unstyled
  class={cover ? "rounded-t-3xl lg:rounded-none mt-[26vh] lg:mt-0" : ""}
>
  <div class="flex flex-col items-center">
    <div
      class={`flex flex-col items-center w-full ${container ? "bg-zinc-200 dark:bg-zinc-950" : "bg-gradient-to-b from-zinc-100 dark:from-zinc-900 to-zinc-200 dark:to-zinc-950"} `}
    >
      <div
        class={`${className} ${widthClass} ${inline ? "" : "pt-7 lg:pt-12"} ${Astro.slots.has("after") ? "!pb-0" : ""}`}
        {...props}
      >
        {
          cover && (
            <div class="hidden lg:inline">
              <CoverMedia cover={cover} entry={entry!} class="h-[40vh] mb-6" />
            </div>
          )
        }
        {
          (Astro.slots.has("header") || entry?.data.draft) && (
            <Text subtitle tag="div">
              {entry?.data.draft ? (
                "Draft (not visible in production)"
              ) : (
                <slot name="header" />
              )}
            </Text>
          )
        }
        <Text
          title
          class={getTextClass(importance ?? (container ? "low" : "post-title"))}
          >{title ?? <slot name="title" />}</Text
        >
        {category && <Text subtitle>{category}</Text>}
        <Text
          class={`${Content ? "is-entry" : ""} ${publishingDate ? "mt-4" : "mt-6"} text-xl 2xl:text-3xl`}
          markdown={!!Content}
          tag={tag}
          >{Content ? <PostContent Content={Content} /> : <slot />}</Text
        >
        {
          downloadLinks && (
            <div class="flex flex-col items-center mt-8 mb-7">
              <Button
                href={downloadLinks[0]}
                importance="button-cta"
                linkClass={buttonWidthClass}
              >
                <div class="group-hover:animate-pulse">{action}</div>
              </Button>
              {downloadLinks.length > 1 && (
                <Text subtitle class={`-mb-4 w-full ${buttonWidthClass}`}>
                  Or
                  {downloadLinks.slice(1).map((link, index, { length }) => (
                    <>
                      <Link href={link}>{getLinkName(link)}</Link>
                      {index !== length - 1 ? ", " : ""}
                    </>
                  ))}
                </Text>
              )}
            </div>
          )
        }
        {
          Astro.slots.has("footer") && (
            <Text subtitle class="mt-2 mb-1.5 2xl:-mb-1" tag="div">
              <slot name="footer" />
            </Text>
          )
        }
        {
          publishingDate && (
            <Text subtitle class="mt-0.5 2xl:mt-3">
              {publishingDate}
            </Text>
          )
        }
      </div>
    </div>
    {
      Astro.slots.has("after") && (
        <Text
          subtitle
          tag="div"
          class={fullWidthAfter ? fullWidthClass : widthClass}
        >
          <slot name="after" />
        </Text>
      )
    }
  </div>
</Card>
<script>
  import type { CollectionKey } from "astro:content";

  //? Save read entries
  document.addEventListener("astro:page-load", () => {
    if (!document.querySelector(".is-entry")) return;

    const readEntriesString = localStorage.getItem("readEntries");

    const readEntries: Partial<Record<CollectionKey, string[]>> =
      readEntriesString ? JSON.parse(readEntriesString) : {};

    const [collection, slug] = location.pathname
      .split("/")
      .filter((part) => !!part)
      .slice(-2) as [CollectionKey, string];

    if (readEntries[collection]?.includes(slug)) {
      // Reorder
      readEntries[collection].splice(readEntries[collection].indexOf(slug), 1);
    }

    // Saved ordered by latest first
    localStorage.setItem(
      "readEntries",
      JSON.stringify({
        ...readEntries,
        [collection]: [slug, ...(readEntries[collection] ?? [])],
      })
    );
  });
</script>
