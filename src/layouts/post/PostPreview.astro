---
import Text from "@ui/Text.astro";
import { render, type CollectionEntry } from "astro:content";
import Button from "@ui/Button.astro";
import {
  getCategory,
  getPublishingDate,
  getPostCover,
  type PostCollectionKey,
  getPostId,
  getDescription,
  getTitle,
} from "./Post.astro";
import type { ComponentProps, HTMLAttributes } from "astro/types";
import PostContent from "./PostContent.astro";
import Media from "@ui/Media.astro";
import { getCoverAlt } from "@post/CoverMedia.astro";
import getReadingTime from "reading-time";
import dayjs from "dayjs";
import duration from "dayjs/plugin/duration";
import { getTextClass } from "@integrations/utils";

interface Props extends HTMLAttributes<"div"> {
  entry?: CollectionEntry<PostCollectionKey> | undefined;
  startHeading?: string | undefined;
  short?: boolean | undefined;
  readMore?: string;
  readMoreText?: string;
  readMoreClass?: string;
  noReadMore?: boolean;
  importance?: Parameters<typeof getTextClass>[0] | undefined;
  tag?: ComponentProps<typeof Text>["tag"];
  hideDate?: boolean;
  container?: boolean;
}

const {
  class: className = "",
  container,
  importance,
  entry,
  startHeading,
  short,
  readMore,
  readMoreText,
  noReadMore,
  readMoreClass = "",
  tag,
  hideDate,
  ...props
} = Astro.props;

const { Content, remarkPluginFrontmatter } = entry ? await render(entry) : {};

const title = getTitle(entry);

const renderedContent =
  getDescription(entry, short ? 1 : undefined, short, startHeading) ?? Content;

const isMarkdown = !!remarkPluginFrontmatter;

const minutesToRead = isMarkdown
  ? remarkPluginFrontmatter.minutesRead -
    Math.min(
      typeof renderedContent === "string"
        ? // Description time
          getReadingTime(renderedContent).minutes
        : // Post time
          remarkPluginFrontmatter.minutesRead,
      // Maximum time assumed to be already spent reading before clicking read more
      0.2
    )
  : undefined;

dayjs.extend(duration);

const readMoreLink =
  noReadMore || (isMarkdown && minutesToRead! < 0)
    ? undefined
    : (readMore ?? (entry && `/${entry.collection}/${getPostId(entry)}`));

const cover = getPostCover(entry);
const category = getCategory(entry);
const publishingDate =
  !hideDate &&
  getPublishingDate(entry, remarkPluginFrontmatter)?.format("D MMMM YYYY");

const subtitle = [category, publishingDate].filter((part) => !!part);
---

<div class=`${className} post-preview h-full` {...props}>
  <div class="flex flex-col size-full justify-between">
    <div>
      {
        (Astro.slots.has("header") || entry?.data.draft) && (
          <Text subtitle tag="div">
            {entry?.data.draft ? (
              "Draft (not visible in production)"
            ) : (
              <slot name="header" />
            )}
          </Text>
        )
      }
      {
        (title || Astro.slots.has("title")) && (
          <Text
            title
            class={`post-preview-title ${getTextClass(
              importance ?? "medium"
            )} ${container ? "lg:ml-4" : ""}`}
          >
            {title ?? <slot name="title" />}
          </Text>
        )
      }
      {
        subtitle.length !== 0 && (
          <Text subtitle class="xl:mt-3">
            {subtitle.join(" \\ ")}
          </Text>
        )
      }
      <Text
        class={`${subtitle.length !== 0 || renderedContent || Astro.slots.has("title") ? (container ? "mt-6" : "mt-4") : ""} text-xl 2xl:text-3xl ${container ? "max-h-[32rem]" : readMoreLink ? "h-64" : ""}`}
        markdown={typeof renderedContent === "function"}
        tag={tag ?? (container ? "div" : undefined)}
        >{
          typeof renderedContent === "function" ? (
            <PostContent preview Content={renderedContent} />
          ) : (
            (renderedContent ?? <slot />)
          )
        }</Text
      >
    </div>
    {
      Astro.slots.has("footer") && (
        <Text subtitle class="mt-6" tag="div">
          <slot name="footer" />
        </Text>
      )
    }
  </div>{
    cover && (
      <div
        class={`post-preview-cover absolute inset-0 pointer-events-none opacity-0 duration-700 ${container ? "group-hover/container-card:opacity-15" : "group-hover/card:opacity-15"}`}
      >
        <Media src={cover} alt={getCoverAlt(entry!)} smoothLoading />
      </div>
    )
  }{
    readMoreLink && (
      <Button
        cardButton
        container={container}
        class="post-preview-read-more"
        linkClass={`${readMoreClass} absolute bottom-0 left-0`}
        href={readMoreLink}
        navigate
      >
        {readMoreText ??
          (isMarkdown
            ? `Read in ${dayjs.duration({ minutes: Math.ceil(minutesToRead!) }).format("m")} min`
            : "Read more")}
        <br />â–¼
      </Button>
    )
  }
</div>
<script>
  import { switchClasses } from "@integrations/utils";

  document.addEventListener("astro:page-load", () => {
    const coverObserver = new IntersectionObserver(
      (entries) =>
        entries.forEach(({ isIntersecting, target }) =>
          switchClasses(target, isIntersecting, ["opacity-15"], ["opacity-0"])
        ),
      { threshold: 0.5 }
    );

    const containerToReadMore = new Map<Element, Element>();

    // TODO PHASE 2 maybe looking for some seconds could also scale text on mobile
    const readMoreObserver = new IntersectionObserver(
      (entries) =>
        entries.forEach(({ isIntersecting, target }) =>
          switchClasses(
            containerToReadMore.get(target)!,
            isIntersecting,
            ["animate-pulse", "lg:animate-none"],
            []
          )
        ),
      { threshold: 0.9 }
    );

    document.querySelectorAll("div.post-preview").forEach((element) => {
      const cover = element.querySelector("div.post-preview-cover");

      if (cover) coverObserver.observe(cover);

      const readMoreText = element.querySelector(
        "button.post-preview-read-more"
      )?.firstElementChild;

      if (readMoreText) {
        const container = element.parentElement?.classList.contains(
          "content-list-card"
        )
          ? element.parentElement
          : element;

        containerToReadMore.set(container, readMoreText);
        readMoreObserver.observe(container);
      }
    });
  });
</script>
