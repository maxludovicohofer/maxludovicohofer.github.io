---
import type { HTMLAttributes } from "astro/types";

interface Props extends HTMLAttributes<"div"> {}

const { class: className = "", ...props } = Astro.props;
---

<div class={`${className} dissolving`} {...props}><slot /></div>
<script>
  import { getPagePosition } from "src/utils";

  const updateContainer = (container: HTMLElement) => {
    if (!container.checkVisibility()) return;

    const scrollPercent = Math.min(
      Math.max(scrollY - getPagePosition(container).top, 0) /
        container.offsetHeight,
      1
    );

    const parallaxSpeed = 6;
    const perfectDissolveSpeed = 0.22;
    const dissolveSpeed = perfectDissolveSpeed + 0.03;

    container.style.opacity = `${1 - scrollPercent * dissolveSpeed * parallaxSpeed}`;

    container.style.setProperty(
      "--tw-translate-y",
      `-${scrollPercent * parallaxSpeed}rem`
    );
    container.style.transform = `translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))`;
  };

  let containers: NodeListOf<HTMLElement>;

  const updateContainers = () => containers.forEach(updateContainer);

  document.addEventListener("astro:page-load", () => {
    containers = document.querySelectorAll<HTMLElement>(".dissolving");
    if (!containers.length) return;

    const observer = new ResizeObserver((entries) =>
      entries.forEach(({ target }) => updateContainer(target as HTMLElement))
    );
    containers.forEach((container) => observer.observe(container));

    addEventListener("scroll", updateContainers);
  });

  document.addEventListener("astro:before-swap", () =>
    removeEventListener("scroll", updateContainers)
  );
</script>
