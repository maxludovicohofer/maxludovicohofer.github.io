---
import Text from "@layouts/Text.astro";
import type { CollectionEntry } from "astro:content";
import type { ImageMetadata } from "astro";
import Button from "./Button.astro";
import { Image } from "astro:assets";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import type { ComponentProps } from "astro/types";

interface Props {
  content?: CollectionEntry<"thoughts"> | CollectionEntry<"projects">;
  readMore?: string;
  importance?: 1 | 2 | 3 | undefined;
  divTag?: boolean;
  hideDate?: boolean;
  fullWidth?: boolean | undefined;
}

const {
  importance = 2,
  content,
  readMore,
  divTag,
  hideDate,
  fullWidth,
} = Astro.props;

const { Content, remarkPluginFrontmatter } = content
  ? await content.render()
  : {};

// Time assumed to be already spent reading before clicking read more
const minutesAlreadySpentReading = 0.5;

const realMinutesToRead =
  remarkPluginFrontmatter &&
  remarkPluginFrontmatter.minutesRead - minutesAlreadySpentReading;

const minutesToRead =
  realMinutesToRead !== undefined && Math.max(Math.round(realMinutesToRead), 1);

const readMoreLink =
  realMinutesToRead && realMinutesToRead < 0
    ? undefined
    : (readMore ?? (content && `${content.collection}/${content.slug}`));

const cleanPathName =
  Astro.url.pathname.at(-1) === "/"
    ? Astro.url.pathname.slice(0, -1)
    : Astro.url.pathname;

const activeReadMoreLink =
  readMoreLink && cleanPathName !== `/${readMoreLink}`
    ? readMoreLink
    : undefined;

const isReadingMore = readMoreLink && !activeReadMoreLink;

dayjs.extend(utc);

const lastModifiedTime =
  remarkPluginFrontmatter &&
  !hideDate &&
  dayjs.utc(remarkPluginFrontmatter.lastModified).format("D MMMM YYYY");

// Load project related info
const project = content?.collection === "projects" ? content : undefined;

const imageFolder = "/src/images/projects/";
const images =
  project &&
  import.meta.glob<{ default: ImageMetadata }>(
    "/src/images/projects/*.{jpeg,jpg,png,gif}"
  );
const imagePath = images && `${imageFolder}${project.slug}.png`;

if (images && !images[imagePath!]) {
  throw new Error(
    `"${imagePath}" does not exist in pattern: "${imageFolder}*.{jpeg,jpg,png,gif}"`
  );
}

// If reading more, default importance
const correctedImportance = isReadingMore ? 2 : importance;

const timeProps: ComponentProps<typeof Text> = {
  subtitle: true,
  className: "mt-1 xl:mt-3",
};

// TODO MAKE IMAGE FULL WIDTH IF READING MORE (LIKE A BANNER)

// TODO MAKE IMAGES FULLSCREENABLE
---

<div
  class={`${isReadingMore && !fullWidth ? "max-w-[45rem] 2xl:max-w-[75rem]" : ""}`}
>
  {
    images && (
      <Image
        src={images[imagePath!]!()}
        class={
          isReadingMore
            ? "rounded-3xl shadow-xl dark:shadow-dark mb-8 size-full"
            : "absolute inset-0 -z-10 size-full object-cover opacity-0 group-hover:opacity-15 intersect:opacity-15 lg:intersect:opacity-0 intersect-half duration-700"
        }
        alt={project.data.description}
        loading={isReadingMore ? "eager" : undefined}
      />
    )
  }
  {
    Astro.slots.has("header") && (
      <Text subtitle className="mb-6" divTag>
        <slot name="header" />
      </Text>
    )
  }
  <Text
    title
    className={correctedImportance === 1
      ? "text-3xl lg:text-xl 2xl:text-3xl"
      : correctedImportance === 2
        ? "text-3xl 2xl:text-5xl"
        : "text-3xl lg:text-5xl 2xl:text-8xl"}
    >{content?.data.title ?? <slot name="title" />}</Text
  >
  {
    lastModifiedTime && !isReadingMore && (
      <Text {...timeProps}>{lastModifiedTime}</Text>
    )
  }

  <Text
    className={`${lastModifiedTime ? "mt-4" : "mt-6"} text-xl 2xl:text-3xl ${activeReadMoreLink ? "max-h-72" : ""}`}
    markdown={!!Content}
    divTag={divTag}>{Content ? <Content /> : <slot />}</Text
  >
  {
    activeReadMoreLink && (
      <Button
        readMore
        className="absolute bottom-0 -mx-8"
        href={activeReadMoreLink}
        openInCurrentPage
      >
        {minutesToRead ? `Read in ${minutesToRead} min` : "Read more"}
        <br />â–¼
      </Button>
    )
  }
  {
    lastModifiedTime && isReadingMore && (
      <Text {...timeProps}>{lastModifiedTime}</Text>
    )
  }
</div>
