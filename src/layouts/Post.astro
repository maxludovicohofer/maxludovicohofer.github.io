---
import Text from "@layouts/Text.astro";
import type { CollectionEntry } from "astro:content";
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import Card from "./Card.astro";
import type { ComponentProps } from "astro/types";

interface Props {
  entry?: CollectionEntry<"thoughts"> | CollectionEntry<"projects">;
  tag?: ComponentProps<typeof Text>["tag"];
  fullWidth?: boolean | undefined;
}

const { entry, tag, fullWidth } = Astro.props;

const { Content, remarkPluginFrontmatter } = entry ? await entry.render() : {};

export const getLastModifiedDate = (
  frontmatter: typeof remarkPluginFrontmatter
) => {
  if (!frontmatter) return;

  dayjs.extend(utc);

  return dayjs.utc(frontmatter.lastModified);
};

const lastModifiedTime = getLastModifiedDate(remarkPluginFrontmatter)?.format(
  "D MMMM YYYY"
);

export const getPostImage = (post: typeof entry) => {
  if (!post) return;

  const imageFolder = `/src/content/${post.collection}/`;
  const images = import.meta.glob<{ default: ImageMetadata }>(
    "/src/content/**/*.{jpeg,jpg,png,gif}"
  );
  const imagePath = `${imageFolder}${post.slug}.png`;
  const image = images[imagePath];

  if (post.collection === "projects" && !image) {
    // Projects require image
    throw new Error(
      `"${imagePath}" does not exist in pattern: "${imageFolder}*.{jpeg,jpg,png,gif}"`
    );
  }

  return image;
};

const image = getPostImage(entry);

// TODO ALSO DISPLAY ROLES AND ENGINE
// TODO MAKE IMAGES FULLSCREENABLE
// TODO REPLACE POST IMAGES WITH LOOPED VIDEOS (BUT ALSO GIVE THE OPTION TO USE IMAGES)

const bodyWidthClass = "lg:max-w-[40rem] 2xl:max-w-[75rem]";
---

{
  image && (
    <Image
      src={image()}
      class={`header-image lg:rounded-3xl lg:shadow-md fixed lg:absolute lg:z-10 lg:left-0 lg:right-0 lg:mx-auto lg:mt-12 w-full lg:max-h-[40vh] lg:h-auto object-cover ${bodyWidthClass}`}
      alt={
        entry?.collection === "projects"
          ? entry.data.description
          : `Graphic explanation of "${entry!.data.title}"`
      }
      loading="eager"
    />
  )
}
<Card
  className=`!bg-opacity-0 !p-6 !pt-7 md:!pt-12 shadow-none ${image ? "rounded-b-none lg:rounded-none translate-y-[26vh] lg:translate-y-0" : "rounded-none"} bg-gradient-to-b from-zinc-100 dark:from-zinc-900 to-zinc-200 dark:to-zinc-950 flex flex-col items-center`
>
  <div
    class={`mb-16 lg:mb-6 ${image ? "lg:mt-[43vh]" : "2xl:-mt-2"} ${fullWidth ? "lg:mx-20" : `max-w-[40rem] ${bodyWidthClass}`}`}
  >
    {
      Astro.slots.has("header") && (
        <Text subtitle className="mb-6" tag="div">
          <slot name="header" />
        </Text>
      )
    }
    <Text title className="text-3xl 2xl:text-5xl"
      >{entry?.data.title ?? <slot name="title" />}</Text
    >
    <Text
      className={`${lastModifiedTime ? "mt-4" : "mt-6"} text-xl 2xl:text-3xl`}
      markdown={!!Content}
      tag={tag}>{Content ? <Content /> : <slot />}</Text
    >
    {
      lastModifiedTime && (
        <Text subtitle className="mt-0.5 xl:mt-3">
          {lastModifiedTime}
        </Text>
      )
    }
  </div>
</Card>
<script>
  addEventListener("scroll", () => {
    const image = document.querySelector<HTMLImageElement>("img.header-image");

    if (!image) return;

    //? Based on Card translate-y class
    image.style.opacity = `${1 - Math.min(scrollY / (0.26 * screen.height), 1)}`;
  });
</script>
