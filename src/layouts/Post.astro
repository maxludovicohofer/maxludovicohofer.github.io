---
import Text from "@layouts/Text.astro";
import type { CollectionEntry } from "astro:content";
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";

interface Props {
  content?: CollectionEntry<"thoughts"> | CollectionEntry<"projects">;
  divTag?: boolean;
  fullWidth?: boolean | undefined;
}

const { content, divTag, fullWidth } = Astro.props;

const { Content, remarkPluginFrontmatter } = content
  ? await content.render()
  : {};

export const getLastModifiedTime = (
  frontmatter: typeof remarkPluginFrontmatter
) => {
  dayjs.extend(utc);

  return (
    frontmatter && dayjs.utc(frontmatter.lastModified).format("D MMMM YYYY")
  );
};

const lastModifiedTime = getLastModifiedTime(remarkPluginFrontmatter);

export const getPostImage = (post: typeof content) => {
  const imageFolder = "/src/images/content/";
  const images =
    post &&
    import.meta.glob<{ default: ImageMetadata }>(
      "/src/images/content/*.{jpeg,jpg,png,gif}"
    );
  const imagePath = images && `${imageFolder}${post.slug}.png`;
  const image = images?.[imagePath!];

  if (post?.collection === "projects" && !image) {
    throw new Error(
      `"${imagePath}" does not exist in pattern: "${imageFolder}*.{jpeg,jpg,png,gif}"`
    );
  }

  return image;
};

const image = getPostImage(content);

// TODO MAKE CONTENT WITH IMAGE A CARD (ROUNDED ANGLES) ONLY ON TOP, WITH THE CARD (WITH SHADOW) OVER THE IMMAGE
// TODO MAKE BANNER PARALLAX
// TODO MAKE IMAGES FULLSCREENABLE

const readMoreClass = "lg:max-w-[40rem] 2xl:max-w-[75rem]";
---

{
  image && (
    <div class="flex flex-col items-center">
      <Image
        src={image()}
        class={`lg:rounded-3xl lg:shadow-md w-screen h-[30vh] lg:h-[40vh] object-cover mb-5 lg:mb-4 lg:mt-14 ${readMoreClass}`}
        alt={
          content?.collection === "projects"
            ? content.data.description
            : `Graphic explanation of "${content!.data.title}"`
        }
        loading="eager"
      />
    </div>
  )
}
<div
  class={`${fullWidth ? "lg:mx-20" : `max-w-[40rem] ${readMoreClass}`} lg:mt-4 2xl:-mt-2 ${image ? "mb-24 lg:mb-12 mx-6" : "mb-16 lg:mb-6 -m-2"}`}
>
  {
    Astro.slots.has("header") && (
      <Text subtitle className="mb-6" divTag>
        <slot name="header" />
      </Text>
    )
  }
  <Text title className="text-3xl 2xl:text-5xl"
    >{content?.data.title ?? <slot name="title" />}</Text
  >
  <Text
    className={`${lastModifiedTime ? "mt-4" : "mt-6"} text-xl 2xl:text-3xl`}
    markdown={!!Content}
    divTag={divTag}>{Content ? <Content /> : <slot />}</Text
  >
  {
    lastModifiedTime && (
      <Text subtitle className="mt-0.5 xl:mt-3">
        {lastModifiedTime}
      </Text>
    )
  }
</div>
