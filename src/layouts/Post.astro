---
import Text from "@layouts/Text.astro";
import type { CollectionEntry } from "astro:content";
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import Card from "./Card.astro";

interface Props {
  content?: CollectionEntry<"thoughts"> | CollectionEntry<"projects">;
  divTag?: boolean;
  fullWidth?: boolean | undefined;
}

const { content, divTag, fullWidth } = Astro.props;

const { Content, remarkPluginFrontmatter } = content
  ? await content.render()
  : {};

export const getLastModifiedTime = (
  frontmatter: typeof remarkPluginFrontmatter
) => {
  dayjs.extend(utc);

  return (
    frontmatter && dayjs.utc(frontmatter.lastModified).format("D MMMM YYYY")
  );
};

const lastModifiedTime = getLastModifiedTime(remarkPluginFrontmatter);

export const getPostImage = (post: typeof content) => {
  const imageFolder = "/src/images/content/";
  const images =
    post &&
    import.meta.glob<{ default: ImageMetadata }>(
      "/src/images/content/*.{jpeg,jpg,png,gif}"
    );
  const imagePath = images && `${imageFolder}${post.slug}.png`;
  const image = images?.[imagePath!];

  if (post?.collection === "projects" && !image) {
    throw new Error(
      `"${imagePath}" does not exist in pattern: "${imageFolder}*.{jpeg,jpg,png,gif}"`
    );
  }

  return image;
};

const image = getPostImage(content);

// TODO MAKE CONTENT WITH IMAGE A CARD (ROUNDED ANGLES) ONLY ON TOP, WITH THE CARD (WITH SHADOW) OVER THE IMMAGE
// TODO MAKE BANNER PARALLAX
// TODO MAKE IMAGES FULLSCREENABLE

const contentWidthClass = "lg:max-w-[40rem] 2xl:max-w-[75rem]";
---

{
  image && (
    <Image
      src={image()}
      class={`lg:rounded-3xl lg:shadow-md lg:absolute lg:z-10 lg:left-0 lg:right-0 lg:mx-auto lg:mt-12 w-full max-h-[30vh] lg:max-h-[40vh] lg:h-auto object-cover -mb-6 ${contentWidthClass}`}
      alt={
        content?.collection === "projects"
          ? content.data.description
          : `Graphic explanation of "${content!.data.title}"`
      }
      loading="eager"
    />
  )
}
<Card
  className=`!bg-opacity-0 ${image ? "lg:rounded-none" : "rounded-none"} p-6 md:pt-12 bg-gradient-to-b from-zinc-100 dark:from-zinc-900 lg:mt-0 flex flex-col items-center`
>
  <div
    class={`mb-16 lg:mb-6 ${image ? "lg:mt-[43vh]" : "2xl:-mt-2"} ${fullWidth ? "lg:mx-20" : `max-w-[40rem] ${contentWidthClass}`}`}
  >
    {
      Astro.slots.has("header") && (
        <Text subtitle className="mb-6" divTag>
          <slot name="header" />
        </Text>
      )
    }
    <Text title className="text-3xl 2xl:text-5xl"
      >{content?.data.title ?? <slot name="title" />}</Text
    >
    <Text
      className={`${lastModifiedTime ? "mt-4" : "mt-6"} text-xl 2xl:text-3xl`}
      markdown={!!Content}
      divTag={divTag}>{Content ? <Content /> : <slot />}</Text
    >
    {
      lastModifiedTime && (
        <Text subtitle className="mt-0.5 xl:mt-3">
          {lastModifiedTime}
        </Text>
      )
    }
  </div>
</Card>
