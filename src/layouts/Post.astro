---
import Text from "@layouts/Text.astro";
import type { CollectionEntry } from "astro:content";
import type { ImageMetadata } from "astro";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import Card from "./Card.astro";
import type { ComponentProps } from "astro/types";
import HeaderImage from "@components/HeaderImage.astro";
import type { CollectionKey } from "astro:content";
import Link from "./Link.astro";
import Button from "./Button.astro";

interface Props {
  entry?: CollectionEntry<"thoughts"> | CollectionEntry<"projects">;
  tag?: ComponentProps<typeof Text>["tag"];
  fullWidth?: boolean | undefined;
  container?: boolean;
  followedByOther?: boolean;
}

const { entry, tag, fullWidth, container, followedByOther } = Astro.props;

const { Content, remarkPluginFrontmatter } = entry ? await entry.render() : {};

export const getLastModifiedDate = (
  frontmatter: typeof remarkPluginFrontmatter
) => {
  if (!frontmatter) return;

  dayjs.extend(utc);

  return dayjs.utc(frontmatter.lastModified || undefined);
};

const lastModifiedTime = getLastModifiedDate(remarkPluginFrontmatter)?.format(
  "D MMMM YYYY"
);

// TODO REPLACE POST IMAGES WITH LOOPED VIDEOS (BUT ALSO GIVE THE OPTION TO USE IMAGES)
export const getPostImage = (post: typeof entry) => {
  if (!post) return;

  const imageFolder = `/src/content/${post.collection}/`;
  const images = import.meta.glob<{ default: ImageMetadata }>(
    "/src/content/**/*.{jpeg,jpg,png,gif}"
  );
  const imagePath = `${imageFolder}${post.slug}.png`;
  const image = images[imagePath];

  if (post.collection === "projects" && !image) {
    // Projects require image
    throw new Error(
      `"${imagePath}" does not exist in pattern: "${imageFolder}*.{jpeg,jpg,png,gif}"`
    );
  }

  return image;
};

const image = getPostImage(entry);

export const getDescription = <C extends CollectionKey>(
  entry?: CollectionEntry<C>
) => {
  function isDescriptiveEntry<C extends CollectionKey>(
    entry?: CollectionEntry<C>
  ): entry is CollectionEntry<C> & { data: { description: string } } {
    return !!(entry && Object.hasOwn(entry.data, "description"));
  }

  return isDescriptiveEntry(entry) ? entry.data.description : undefined;
};

export const getCategory = <C extends CollectionKey>(
  entry?: CollectionEntry<C>
) => {
  function isCategoryEntry<C extends CollectionKey>(
    entry?: CollectionEntry<C>
  ): entry is CollectionEntry<C> & { data: { category: string } } {
    return !!(entry && Object.hasOwn(entry.data, "category"));
  }

  const categoryEnum = isCategoryEntry(entry)
    ? (entry.data.category as CollectionEntry<"projects">["data"]["category"])
    : undefined;

  return categoryEnum === "Game" ? "Published game" : categoryEnum;
};

const category = getCategory(entry);

export const getDownloadLinks = <C extends CollectionKey>(
  entry?: CollectionEntry<C>
) => {
  function isDownloadableEntry<C extends CollectionKey>(
    entry?: CollectionEntry<C>
  ): entry is CollectionEntry<C> & { data: { downloadLinks: string[] } } {
    return !!(entry && Object.hasOwn(entry.data, "downloadLinks"));
  }

  const downloadLinks = isDownloadableEntry(entry)
    ? (entry.data
        .downloadLinks as CollectionEntry<"projects">["data"]["downloadLinks"])
    : undefined;

  return downloadLinks;
};

const downloadLinks = getDownloadLinks(entry);
const downloadsPresent = downloadLinks && downloadLinks.length !== 0;

const toTitleCase = (word: string) =>
  word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();

const bodyWidthClass = "lg:max-w-[40rem] 2xl:max-w-[75rem]";

const buttonWidthClass = "max-w-[25rem] 2xl:max-w-[40rem]";

// TODO ADD ALL CONTENT
---

{
  image && (
    <HeaderImage
      mobile
      image={image}
      bodyWidthClass={bodyWidthClass}
      entry={entry}
    />
  )
}
<Card
  container={container}
  className={`!bg-opacity-0 !p-6 !pt-7 md:!pt-12 !shadow-none ${image ? `rounded-b-none lg:rounded-none translate-y-[26vh] lg:translate-y-0 ${followedByOther ? "mb-[26vh] lg:mb-0" : ""}` : "rounded-none"} ${container ? "" : "bg-gradient-to-b from-zinc-100 dark:from-zinc-900 to-zinc-200 dark:to-zinc-950"} flex flex-col items-center`}
>
  <div
    class={`w-full mb-16 lg:mb-6 ${image ? "lg:mt-[43vh]" : "2xl:-mt-2"} ${fullWidth ? "lg:mx-20" : `max-w-[40rem] ${bodyWidthClass}`}`}
  >
    <Text title className="text-3xl 2xl:text-5xl">
      {entry?.data.title ?? <slot name="title" />}
    </Text>
    {category && <Text subtitle>{category}</Text>}
    <Text
      className={`${Content ? "is-entry" : ""} ${lastModifiedTime ? "mt-4" : "mt-6"} text-xl 2xl:text-3xl`}
      markdown={!!Content}
      tag={tag}>{Content ? <Content /> : <slot />}</Text
    >
    {
      downloadsPresent && (
        <div class="flex flex-col items-center mt-8 mb-7">
          <Button href={downloadLinks[0]} linkClassName={buttonWidthClass}>
            Play
          </Button>
          {downloadLinks.length > 1 && (
            <Text subtitle className={`-mb-4 w-full ${buttonWidthClass}`}>
              Or
              {downloadLinks.slice(1).map((link, index, { length }) => (
                <>
                  <Link href={link}>
                    {toTitleCase(new URL(link).host.split(".").at(-2)!)}
                  </Link>
                  {index !== length - 1 ? ", " : ""}
                </>
              ))}
            </Text>
          )}
        </div>
      )
    }
    {
      Astro.slots.has("footer") && (
        <Text subtitle className="mt-2 mb-1.5 xl:-mb-1" tag="div">
          <slot name="footer" />
        </Text>
      )
    }
    {
      lastModifiedTime && (
        <Text subtitle className="mt-0.5 xl:mt-3">
          {lastModifiedTime}
        </Text>
      )
    }
  </div>
</Card>
{
  image && (
    <HeaderImage image={image} bodyWidthClass={bodyWidthClass} entry={entry} />
  )
}
<script>
  import type { CollectionKey } from "astro:content";

  // TODO PHASE 2 DOES NOT WORK ON MOBILE, FIX

  //? Save read entries
  document.addEventListener("astro:page-load", () => {
    const isEntry = document.querySelector<HTMLDivElement>("div.is-entry");

    if (!isEntry) return;

    const readEntriesString = localStorage.getItem("readEntries");

    const readEntries: Partial<Record<CollectionKey, string[]>> =
      readEntriesString ? JSON.parse(readEntriesString) : {};

    const [collection, slug] = location.pathname.split("/").slice(-2) as [
      CollectionKey,
      string,
    ];

    if (readEntries[collection]?.includes(slug)) {
      // Reorder
      readEntries[collection].splice(readEntries[collection].indexOf(slug), 1);
    }

    // Saved ordered by latest first
    localStorage.setItem(
      "readEntries",
      JSON.stringify({
        ...readEntries,
        [collection]: [slug, ...(readEntries[collection] ?? [])],
      })
    );
  });
</script>
