---
import Text from "@layouts/Text.astro";
import type { CollectionEntry } from "astro:content";
import type { ImageMetadata } from "astro";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import Card from "./Card.astro";
import type { ComponentProps } from "astro/types";
import HeaderImage from "@components/HeaderImage.astro";

interface Props {
  entry?: CollectionEntry<"thoughts"> | CollectionEntry<"projects">;
  tag?: ComponentProps<typeof Text>["tag"];
  fullWidth?: boolean | undefined;
  container?: boolean;
  followedByOther?: boolean;
}

const { entry, tag, fullWidth, container, followedByOther } = Astro.props;

const { Content, remarkPluginFrontmatter } = entry ? await entry.render() : {};

export const getLastModifiedDate = (
  frontmatter: typeof remarkPluginFrontmatter
) => {
  if (!frontmatter) return;

  dayjs.extend(utc);

  return dayjs.utc(frontmatter.lastModified || undefined);
};

const lastModifiedTime = getLastModifiedDate(remarkPluginFrontmatter)?.format(
  "D MMMM YYYY"
);

export const getPostImage = (post: typeof entry) => {
  if (!post) return;

  const imageFolder = `/src/content/${post.collection}/`;
  const images = import.meta.glob<{ default: ImageMetadata }>(
    "/src/content/**/*.{jpeg,jpg,png,gif}"
  );
  const imagePath = `${imageFolder}${post.slug}.png`;
  const image = images[imagePath];

  if (post.collection === "projects" && !image) {
    // Projects require image
    throw new Error(
      `"${imagePath}" does not exist in pattern: "${imageFolder}*.{jpeg,jpg,png,gif}"`
    );
  }

  return image;
};

const image = getPostImage(entry);

// TODO MAKE IMAGES FULLSCREENABLE
// TODO REPLACE POST IMAGES WITH LOOPED VIDEOS (BUT ALSO GIVE THE OPTION TO USE IMAGES)
// TODO ADD ALL CONTENT

const bodyWidthClass = "lg:max-w-[40rem] 2xl:max-w-[75rem]";
---

{
  image && (
    <HeaderImage
      mobile
      image={image}
      bodyWidthClass={bodyWidthClass}
      entry={entry}
    />
  )
}
<Card
  container={container}
  className={`!bg-opacity-0 !p-6 !pt-7 md:!pt-12 !shadow-none ${image ? `rounded-b-none lg:rounded-none translate-y-[26vh] lg:translate-y-0 ${followedByOther ? "mb-[26vh] lg:mb-0" : ""}` : "rounded-none"} ${container ? "" : "bg-gradient-to-b from-zinc-100 dark:from-zinc-900 to-zinc-200 dark:to-zinc-950"} flex flex-col items-center`}
>
  <div
    class={`mb-16 lg:mb-6 ${image ? "lg:mt-[43vh]" : "2xl:-mt-2"} ${fullWidth ? "lg:mx-20" : `max-w-[40rem] ${bodyWidthClass}`}`}
  >
    <Text title className="text-3xl 2xl:text-5xl"
      >{entry?.data.title ?? <slot name="title" />}</Text
    >

    <Text
      className={`${Content ? "is-entry" : ""} ${lastModifiedTime ? "mt-4" : "mt-6"} text-xl 2xl:text-3xl`}
      markdown={!!Content}
      tag={tag}>{Content ? <Content /> : <slot />}</Text
    >
    {
      Astro.slots.has("header") && (
        <Text subtitle className="mt-2 mb-1.5 xl:-mb-1" tag="div">
          <slot name="header" />
        </Text>
      )
    }
    {
      lastModifiedTime && (
        <Text subtitle className="mt-0.5 xl:mt-3">
          {lastModifiedTime}
        </Text>
      )
    }
  </div>
</Card>
{
  image && (
    <HeaderImage image={image} bodyWidthClass={bodyWidthClass} entry={entry} />
  )
}
