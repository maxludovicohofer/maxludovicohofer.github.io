---
import Text from "@layouts/Text.astro";
import type { CollectionKey, CollectionEntry } from "astro:content";
import { render } from "astro:content";
import type { ImageMetadata } from "astro";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import Card from "./Card.astro";
import type { ComponentProps } from "astro/types";
import Cover from "@components/Cover.astro";
import Link from "./Link.astro";
import Button from "./Button.astro";
import type Video from "./Video.astro";
import { toTitleCase } from "src/utils";

interface Props {
  entry?: CollectionEntry<PostCollection>;
  tag?: ComponentProps<typeof Text>["tag"];
  fullWidth?: boolean | undefined;
  container?: boolean;
  followedByOther?: boolean;
}

const { entry, tag, fullWidth, container, followedByOther } = Astro.props;

export type PostCollection = Extract<CollectionKey, "projects" | "thoughts">;

const { Content, remarkPluginFrontmatter } = entry ? await render(entry) : {};

export const getPublishingDate = (
  post: typeof entry,
  frontmatter: typeof remarkPluginFrontmatter
) => {
  if (post?.data.publishingDate) return dayjs(post.data.publishingDate);

  if (!frontmatter) return;

  dayjs.extend(utc);

  return dayjs.utc(frontmatter.created || undefined);
};

const publishingDate = getPublishingDate(
  entry,
  remarkPluginFrontmatter
)?.format("D MMMM YYYY");

export const getPostCover = (post: typeof entry) => {
  if (!post) return;

  if (post.data.youTubeID)
    return {
      id: post.data.youTubeID,
      aspect: post.data.youTubeAspectRatio ?? "16/9",
    } satisfies ComponentProps<typeof Video>["youTubeInfo"];

  const imageFolder = `/data/${post.collection}/`;
  const extensions = ["png", "jpg", "jpeg", "gif"];
  const images = import.meta.glob<{ default: ImageMetadata }>(
    "/data/**/*.{png,jpg,jpeg,gif}"
  );
  const imagePath = `${imageFolder}${post.id}`;
  const image =
    images[
      `${imagePath}.${extensions.find((extension) => images[`${imagePath}.${extension}`])}`
    ];

  if (post.collection === "projects" && !image) {
    // Projects require image
    throw new Error(
      `An image for "${imagePath}" does not exist in pattern: "${imageFolder}*.{${extensions.join(",")}}". Import an image, or preferably a video.`
    );
  }

  return image;
};

const cover = getPostCover(entry);

export const getDescription = <C extends CollectionKey>(
  entry?: CollectionEntry<C>
) => {
  function isDescriptiveEntry<C extends CollectionKey>(
    entry?: CollectionEntry<C>
  ): entry is CollectionEntry<C> & { data: { description: string } } {
    return !!(entry && Object.hasOwn(entry.data, "description"));
  }

  return isDescriptiveEntry(entry) ? entry.data.description : undefined;
};

export const getCategory = <C extends CollectionKey>(
  entry?: CollectionEntry<C>
) => {
  function isCategoryEntry<C extends CollectionKey>(
    entry?: CollectionEntry<C>
  ): entry is CollectionEntry<C> & { data: { category: string } } {
    return !!(entry && Object.hasOwn(entry.data, "category"));
  }

  const categoryEnum = isCategoryEntry(entry)
    ? (entry.data.category as CollectionEntry<"projects">["data"]["category"])
    : undefined;

  return categoryEnum === "Game" ? "Published game" : categoryEnum;
};

const category = getCategory(entry);

export const getDownloadLinks = <C extends CollectionKey>(
  entry?: CollectionEntry<C>
) => {
  function isDownloadableEntry<C extends CollectionKey>(
    entry?: CollectionEntry<C>
  ): entry is CollectionEntry<C> & { data: { downloadLinks: string[] } } {
    return !!(entry && Object.hasOwn(entry.data, "downloadLinks"));
  }

  const downloadLinks = isDownloadableEntry(entry)
    ? (entry.data
        .downloadLinks as CollectionEntry<"projects">["data"]["downloadLinks"])
    : undefined;

  return downloadLinks;
};

const downloadLinks = getDownloadLinks(entry);
const downloadsPresent = downloadLinks && downloadLinks.length !== 0;

const buttonWidthClass = "max-w-[25rem] 2xl:max-w-[40rem]";
---

{
  cover && (
    <Cover
      cover={cover}
      entry={entry}
      className="lg:hidden fixed left-0 right-0 mx-auto active:rounded-xl h-[55vh] -mt-[14vh]"
    />
  )
}
<Card
  container={container}
  className={`!bg-opacity-0 !p-6 !pt-7 md:!pt-12 !shadow-none ${cover ? `rounded-b-none lg:rounded-none translate-y-[26vh] lg:translate-y-0 ${followedByOther ? "mb-[25vh] lg:mb-0" : ""}` : "rounded-none"} ${container ? "" : "bg-gradient-to-b from-zinc-100 dark:from-zinc-900 to-zinc-200 dark:to-zinc-950"} flex flex-col items-center`}
>
  <div
    class={`w-full mb-16 lg:mb-6 ${fullWidth ? "lg:px-20" : "max-w-[40rem] 2xl:max-w-[70rem]"}`}
  >
    {
      cover && (
        <Cover
          cover={cover}
          entry={entry}
          className="hidden lg:inline rounded-3xl h-[40vh] mb-6"
        />
      )
    }
    <Text title className="text-3xl 2xl:text-5xl">
      {entry?.data.title ?? <slot name="title" />}
    </Text>
    {category && <Text subtitle>{category}</Text>}
    <Text
      className={`${Content ? "is-entry" : ""} ${publishingDate ? "mt-4" : "mt-6"} text-xl 2xl:text-3xl`}
      markdown={!!Content}
      tag={tag}>{Content ? <Content /> : <slot />}</Text
    >
    {
      downloadsPresent && (
        <div class="flex flex-col items-center mt-8 mb-7">
          <Button href={downloadLinks[0]} linkClassName={buttonWidthClass}>
            {category === "Tool" ? "Download" : "Play"}
          </Button>
          {downloadLinks.length > 1 && (
            <Text subtitle className={`-mb-4 w-full ${buttonWidthClass}`}>
              Or
              {downloadLinks.slice(1).map((link, index, { length }) => (
                <>
                  <Link href={link}>
                    {toTitleCase(new URL(link).host.split(".").at(-2)!)}
                  </Link>
                  {index !== length - 1 ? ", " : ""}
                </>
              ))}
            </Text>
          )}
        </div>
      )
    }
    {
      Astro.slots.has("footer") && (
        <Text subtitle className="mt-2 mb-1.5 xl:-mb-1" tag="div">
          <slot name="footer" />
        </Text>
      )
    }
    {
      publishingDate && (
        <Text subtitle className="mt-0.5 xl:mt-3">
          {publishingDate}
        </Text>
      )
    }
  </div>
</Card>
<script>
  import type { CollectionKey } from "astro:content";

  //? Save read entries
  document.addEventListener("astro:page-load", () => {
    const isEntry = document.querySelector<HTMLDivElement>("div.is-entry");

    if (!isEntry) return;

    const readEntriesString = localStorage.getItem("readEntries");

    const readEntries: Partial<Record<CollectionKey, string[]>> =
      readEntriesString ? JSON.parse(readEntriesString) : {};

    const [collection, slug] = location.pathname
      .split("/")
      .filter((part) => !!part)
      .slice(-2) as [CollectionKey, string];

    if (readEntries[collection]?.includes(slug)) {
      // Reorder
      readEntries[collection].splice(readEntries[collection].indexOf(slug), 1);
    }

    // Saved ordered by latest first
    localStorage.setItem(
      "readEntries",
      JSON.stringify({
        ...readEntries,
        [collection]: [slug, ...(readEntries[collection] ?? [])],
      })
    );
  });
</script>
