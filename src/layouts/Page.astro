---
import { ClientRouter } from "astro:transitions";
import BackButton from "@ui/BackButton.astro";
import ModalSlot from "./ModalSlot.astro";
import { capitalize, getHumanPathSection } from "@integrations/text";
import { getRole } from "@integrations/astro-server";
import { getCurrentLocale, i18n } from "@integrations/i18n-server";
import LanguageSelection from "@components/ui/LanguageSelection.astro";

interface Props {
  title?: string | undefined;
  description?: string | undefined;
  backHref?: string;
  homepage?: boolean;
  noTranslation?: boolean;
}

const { title, description, backHref, homepage, noTranslation } = Astro.props;

const t = i18n(Astro);

const { role } = await getRole(Astro);

const formattedTitle = capitalize(
  title ??
    (homepage
      ? (role.data.workFields?.[0] ?? role.id)
      : getHumanPathSection(Astro.originPathname))
);
const completeTitle = `${await t("Max Hofer")} \\ ${noTranslation ? formattedTitle : await t(formattedTitle)}`;

const formattedDescription = description
  ? capitalize(description)
  : formattedTitle;
const translatedDescription = noTranslation
  ? formattedDescription
  : await t(formattedDescription);
const completeDescription = description
  ? translatedDescription
  : `${translatedDescription}${await t(".")}`;

const hasBack = !homepage;
---

<!doctype html>
<html lang={getCurrentLocale(Astro)}>
  <head>
    <slot name="head" />

    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <title>{completeTitle}</title>
    <meta name="title" content={completeTitle} />
    <meta name="description" content={completeDescription} />

    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <ClientRouter />

    <!-- Umami analytics -->
    <script
      is:inline
      defer
      type="text/partytown"
      src="https://cloud.umami.is/script.js"
      data-website-id="4cbde35d-908e-44ec-b45c-9face0570614"></script>
  </head>
  <body class="bg-zinc-200 dark:bg-zinc-950"
    ><slot /><LanguageSelection hasBack={hasBack} class="print:hidden" />{
      hasBack && (
        <BackButton href={backHref} prefetch="load" class="print:hidden" />
      )
    }
    <ModalSlot />
    <script>
      import { saveScrollPosition } from "@integrations/astro";
      import { getPagePosition } from "@integrations/html";

      document.addEventListener("astro:before-swap", saveScrollPosition);

      document.addEventListener("astro:after-swap", () => {
        const state = sessionStorage.getItem(location.pathname);

        if (!state) return;

        const scroll: Required<ScrollToOptions> = JSON.parse(state);

        //? A scroll reset elements resets scroll if scroll has reached it (is visible)
        const scrollReset =
          document.querySelector<HTMLElement>(".scroll-reset");

        scrollTo({
          ...(scrollReset &&
          scroll.top > getPagePosition(scrollReset).top - window.innerHeight
            ? { top: 0, left: 0 }
            : scroll),
          behavior: "instant",
        });
      });
    </script>

    <!-- External scripts -->

    <script>
      import "node_modules/lite-youtube-embed/src/lite-yt-embed.js";
    </script>
  </body>
</html>
