---
import Card from "@layouts/Card.astro";
import { getPublishingDate, type PostCollection } from "@layouts/Post.astro";
import PostPreview from "@layouts/PostPreview.astro";
import { render, getCollection, type CollectionEntry } from "astro:content";

interface Props {
  collection: PostCollection;
  short?: boolean;
  className?: string;
  exclude?: CollectionEntry<PostCollection>[] | undefined;
  additional?: CollectionEntry<PostCollection>[];
  numberOfItemsToLoadEager?: number | undefined;
}

const {
  collection,
  short,
  className = "",
  exclude = [],
  additional = [],
  numberOfItemsToLoadEager = 0,
} = Astro.props;

export const getSortedEntries = async <C extends PostCollection>(
  entryCollection: C,
  excluded: CollectionEntry<C>[] = []
) => {
  // Exclude highlight and latest, will be added again at the end
  const entries = await getCollection(
    entryCollection,
    ({ data: { draft }, id }) =>
      !draft && excluded.every((entry) => id !== entry.id)
  );

  // Sort by latest first
  return (
    await Promise.all(
      entries.map(async (entry) => ({
        ...entry,
        publishingDate: getPublishingDate(
          (await render(entry)).remarkPluginFrontmatter
        )!,
      }))
    )
  ).toSorted((a, b) => (b.publishingDate.isAfter(a.publishingDate) ? 1 : -1));
};

const sortedEntries: CollectionEntry<PostCollection>[] = await getSortedEntries(
  collection,
  exclude
);

// Add additional at the end
sortedEntries.push(...additional);
---

<ol
  class={`content-list/${collection} content-list-size/${numberOfItemsToLoadEager} ${className} grid grid-flow-col md:grid-flow-row md:grid-cols-1 gap-4 mb-4 overflow-x-scroll scrollbar-hide`}
>
  {
    sortedEntries.map((entry) => (
      <Card
        tag="li"
        className={`content-slug/${entry.id} w-[80vw] md:w-auto scale-90 md:scale-100 intersect:scale-100 intersect-half duration-200 ${short ? "h-80 md:h-64" : ""}`}
      >
        <PostPreview
          importance="container-item"
          entry={entry}
          minutesAlreadySpentReading={short ? 0 : undefined}
          descriptionAsBody={short}
        />
      </Card>
    ))
  }
</ol>
<script>
  import type { CollectionKey } from "astro:content";

  const carouselEvents: {
    [K in keyof HTMLElementEventMap]?: (
      this: HTMLElement,
      e: HTMLElementEventMap[K]
    ) => any;
  } = {
    mouseenter: function () {
      this.style.cursor = "grab";
    },
    mousedown: function (e) {
      // Prevent selection of text
      e.preventDefault();
    },
    mousemove: function (e) {
      // Move only if mouse clicked and not right click
      if (!e.buttons || e.buttons === 2) return;
      this.scrollLeft = this.scrollLeft - e.movementX;
      this.style.cursor = "grabbing";
    },
    mouseup: function () {
      this.style.cursor = "grab";
    },
  };

  document.addEventListener("astro:page-load", () => {
    const readEntriesString = localStorage.getItem("readEntries");

    const readEntries: Partial<Record<CollectionKey, string[]>> =
      readEntriesString ? JSON.parse(readEntriesString) : {};

    const observer = new ResizeObserver((entries) =>
      entries.forEach(({ target }) => {
        const list = target as HTMLElement;

        for (const event in carouselEvents) {
          list[
            list.scrollWidth > list.offsetWidth
              ? "addEventListener"
              : "removeEventListener"
          ](event, carouselEvents[event as keyof typeof carouselEvents] as any);
        }
      })
    );

    document
      .querySelectorAll<HTMLOListElement>("ol[class^=content-list]")
      .forEach((list) => {
        observer.observe(list);

        // Order entries
        const readEntrySlugs =
          readEntries[list.classList[0]?.split("/").at(-1) as CollectionKey];

        if (!readEntrySlugs) return;

        readEntrySlugs.forEach((readSlug) => {
          for (const item of list.children) {
            if (item.classList[0]?.split("/").at(-1) !== readSlug) continue;

            // Move to end
            list.append(item);
            return;
          }
        });

        const itemsToLoadEager = Number(list.classList[1]?.split("/").at(-1));

        if (!itemsToLoadEager) return;

        const images = list.querySelectorAll<HTMLImageElement>("img");

        for (
          let index = 0;
          index < Math.min(images.length, itemsToLoadEager);
          index++
        ) {
          images[index]!.loading = "eager";
        }
      });
  });
</script>
