---
import Card from "@layouts/Card.astro";
import { getLastModifiedDate } from "@layouts/Post.astro";
import PostPreview from "@layouts/PostPreview.astro";
import type { CollectionEntry } from "astro:content";
import type { CollectionKey } from "astro:content";
import { getCollection } from "astro:content";

interface Props {
  collection: CollectionKey;
  short?: boolean;
  className?: string;
  exclude?: CollectionEntry<CollectionKey>[] | undefined;
  additional?: CollectionEntry<CollectionKey>[];
}

const {
  collection,
  short,
  className,
  exclude = [],
  additional = [],
} = Astro.props;

// Exclude highlight and latest, will be added again at the end
const entries = await getCollection(
  collection,
  ({ data: { draft }, id }) =>
    !draft && exclude.every((entry) => id !== entry.id)
);

// Sort by latest first
const sortedEntries: CollectionEntry<typeof collection>[] = (
  await Promise.all(
    entries.map(async (entry) => ({
      ...entry,
      lastModifiedDate: getLastModifiedDate(
        (await entry.render()).remarkPluginFrontmatter
      )!,
    }))
  )
).toSorted((a, b) => (b.lastModifiedDate.isAfter(a.lastModifiedDate) ? 1 : -1));

// Add already visible at the end
sortedEntries.push(...additional);

// TODO SAVE READ CONTENT IN LOCALSTORAGE, AND PLACE THEM AT THE END OF THE LIST ORDERED BY LATEST (ALSO CHANGE LATEST ON LANDING PAGE BASED ON THIS ALGORITHM)
---

<ol class={`grid grid-cols-1 gap-4 mb-4 ${className}`}>
  {
    sortedEntries.map((entry) => (
      <Card tag="li" className={short ? "min-h-60 max-h-72 xl:max-h-none" : ""}>
        <PostPreview
          importance={1}
          entry={entry}
          fullHeightReadMore={short}
          minutesAlreadySpentReading={short ? 0 : undefined}
          descriptionAsBody={short}
        />
      </Card>
    ))
  }
</ol>
