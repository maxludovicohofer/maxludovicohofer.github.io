---
import Card from "@layouts/Card.astro";
import {
  getPublishingDate,
  type PostCollection,
} from "@layouts/Post/Post.astro";
import PostPreview from "@layouts/Post/PostPreview.astro";
import { render, getCollection, type CollectionEntry } from "astro:content";

interface Props {
  collection: PostCollection;
  short?: boolean;
  className?: string;
  exclude?: string[] | undefined;
  disableHighlight?: true;
  append?: CollectionEntry<PostCollection>[];
  numberOfItemsToLoadEager?: number | undefined;
}

const {
  collection,
  short,
  className = "",
  exclude = [],
  append = [],
  disableHighlight,
  numberOfItemsToLoadEager = 0,
} = Astro.props;

export const getSortedEntries = async <C extends PostCollection>(
  entryCollection: C,
  excluded: string[] = []
) => {
  const entries = await getCollection(
    entryCollection,
    ({ data: { draft }, id }) =>
      (import.meta.env.DEV || !draft) && excluded.every((entry) => id !== entry)
  );

  // Sort by latest first
  return (
    await Promise.all(
      entries.map(async (entry) => ({
        ...entry,
        publishingDate: getPublishingDate(
          entry,
          (await render(entry)).remarkPluginFrontmatter
        )!,
      }))
    )
  ).toSorted((a, b) => (b.publishingDate.isAfter(a.publishingDate) ? 1 : -1));
};

const sortedEntries: CollectionEntry<PostCollection>[] = await getSortedEntries(
  collection,
  exclude
);

// Add additional at the end
sortedEntries.push(...append);

let highlightSet = false;
---

<ol
  class={`content-list/${collection} content-list-size/${numberOfItemsToLoadEager} ${className} grid grid-flow-col md:grid-flow-row gap-4 overflow-x-scroll scrollbar-hide snap-mandatory pb-4 md:pb-0`}
>
  {
    sortedEntries.map((entry) => {
      const isHighlight =
        !disableHighlight && !highlightSet && entry.data.highlight;

      if (isHighlight) highlightSet = true;

      return (
        <Card
          tag="li"
          className={`content-slug/${entry.id} snap-center w-[80dvw] md:w-auto h-[17rem] ${isHighlight ? `row-start-1 col-span-full md:h-[23.6rem]` : ""}`}
        >
          <PostPreview
            importance={isHighlight ? "container-highlight" : "container-item"}
            entry={entry}
            minutesAlreadySpentReading={short && !isHighlight ? 0 : undefined}
            descriptionAsBody={short}
          />
        </Card>
      );
    })
  }
</ol>
<script>
  import type { CollectionKey } from "astro:content";
  import { hasClass, removeFromClasses } from "src/utils";

  const carouselEvents: {
    [K in keyof HTMLElementEventMap]?: (
      this: HTMLElement,
      e: HTMLElementEventMap[K]
    ) => any;
  } = {
    mouseenter: function () {
      this.style.cursor = "grab";
    },
    mousedown: function (e) {
      // Prevent selection of text
      e.preventDefault();
    },
    mousemove: function (e) {
      // Move only if mouse clicked and not right click
      if (!e.buttons || e.buttons === 2) return;

      const scrollTarget = this.scrollLeft - e.movementX;
      this.scrollLeft = scrollTarget;

      if (this.scrollLeft !== scrollTarget) {
        // Disable scroll snap when it misbehaves
        this.classList.remove("snap-x");
        this.scrollLeft = scrollTarget;
      }

      this.style.cursor = "grabbing";
    },
    mouseup: function () {
      this.style.cursor = "grab";
    },
  };

  document.addEventListener("astro:page-load", () => {
    const readEntriesString = localStorage.getItem("readEntries");

    const readEntries: Partial<Record<CollectionKey, string[]>> =
      readEntriesString ? JSON.parse(readEntriesString) : {};

    const observer = new ResizeObserver((entries) =>
      entries.forEach(({ target }) => {
        const list = target as HTMLElement;

        for (const event in carouselEvents) {
          list[
            list.scrollWidth > list.offsetWidth
              ? "addEventListener"
              : "removeEventListener"
          ](event, carouselEvents[event as keyof typeof carouselEvents] as any);
        }
      })
    );

    document
      .querySelectorAll<HTMLOListElement>("ol[class^=content-list]")
      .forEach((list) => {
        observer.observe(list);

        // Order entries
        const readEntrySlugs =
          readEntries[list.classList[0]?.split("/").at(-1) as CollectionKey];

        if (!readEntrySlugs) return;

        readEntrySlugs.forEach((readSlug) => {
          for (const item of list.children) {
            if (item.classList[0]?.split("/").at(-1) !== readSlug) continue;

            if (hasClass("row-start-1", item.className)) {
              // Remove highlight classes
              item.className = removeFromClasses(item.className, [
                "row-start",
                "col-span",
                "md:h",
              ]);

              const highlightTitle = item.querySelector<HTMLElement>(
                "[class^=preview-title]"
              )!;

              // Add normal text
              highlightTitle.className = removeFromClasses(
                highlightTitle.className,
                ["text"]
              );
              highlightTitle.classList.add(
                "text-2xl",
                "2xl:text-3xl",
                "text-balance",
                "text-zinc-950",
                "dark:text-zinc-100"
              );
            }

            // Move to end
            list.append(item);
            return;
          }
        });

        // Add snap
        list.classList.add("snap-x");

        const itemsToLoadEager = Number(list.classList[1]?.split("/").at(-1));

        if (!itemsToLoadEager) return;

        const images = list.querySelectorAll<
          HTMLImageElement | HTMLIFrameElement
        >("img, iframe");

        for (
          let index = 0;
          index < Math.min(images.length, itemsToLoadEager);
          index++
        ) {
          images[index]!.loading = "eager";
        }
      });
  });
</script>
