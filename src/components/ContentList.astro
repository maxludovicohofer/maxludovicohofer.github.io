---
import Card from "@layouts/Card.astro";
import { getLastModifiedDate } from "@layouts/Post.astro";
import PostPreview from "@layouts/PostPreview.astro";
import type { CollectionKey, CollectionEntry } from "astro:content";
import { render, getCollection } from "astro:content";

interface Props {
  collection: CollectionKey;
  short?: boolean;
  className?: string;
  exclude?: CollectionEntry<CollectionKey>[] | undefined;
  additional?: CollectionEntry<CollectionKey>[];
  numberOfItemsToLoadEager?: number | undefined;
}

const {
  collection,
  short,
  className = "",
  exclude = [],
  additional = [],
  numberOfItemsToLoadEager = 0,
} = Astro.props;

export const getSortedEntries = async <C extends CollectionKey>(
  entryCollection: C,
  excluded: CollectionEntry<CollectionKey>[] = []
) => {
  // Exclude highlight and latest, will be added again at the end
  const entries = await getCollection(
    entryCollection,
    ({ data: { draft }, id }) =>
      !draft && excluded.every((entry) => id !== entry.id)
  );

  // Sort by latest first
  return (
    await Promise.all(
      entries.map(async (entry) => ({
        ...entry,
        lastModifiedDate: getLastModifiedDate(
          (await render(entry)).remarkPluginFrontmatter
        )!,
      }))
    )
  ).toSorted((a, b) =>
    b.lastModifiedDate.isAfter(a.lastModifiedDate) ? 1 : -1
  );
};

const sortedEntries: CollectionEntry<typeof collection>[] =
  await getSortedEntries(collection, exclude);

// Add additional at the end
sortedEntries.push(...additional);
---

<ol
  class={`content-list/${collection} content-list-size/${numberOfItemsToLoadEager} ${className} grid grid-cols-1 gap-4 mb-4`}
>
  {
    sortedEntries.map((entry) => (
      <Card
        tag="li"
        className={`content-slug/${entry.id} ${short ? "h-64 xl:max-h-none" : ""}`}
      >
        <PostPreview
          importance="container-item"
          entry={entry}
          minutesAlreadySpentReading={short ? 0 : undefined}
          descriptionAsBody={short}
        />
      </Card>
    ))
  }
</ol>
<script>
  import type { CollectionKey } from "astro:content";

  document.addEventListener("astro:page-load", () => {
    const readEntriesString = localStorage.getItem("readEntries");

    const readEntries: Partial<Record<CollectionKey, string[]>> =
      readEntriesString ? JSON.parse(readEntriesString) : {};

    document
      .querySelectorAll<HTMLOListElement>("ol[class^=content-list]")
      .forEach((list) => {
        const readEntrySlugs =
          readEntries[list.classList[0]?.split("/").at(-1) as CollectionKey];

        if (!readEntrySlugs) return;

        readEntrySlugs.forEach((readSlug) => {
          for (const item of list.children) {
            if (item.classList[0]?.split("/").at(-1) !== readSlug) continue;

            // Move to end
            list.append(item);
            return;
          }
        });

        const itemsToLoadEager = Number(list.classList[1]?.split("/").at(-1));

        if (!itemsToLoadEager) return;

        const images = list.querySelectorAll<HTMLImageElement>("img");

        for (
          let index = 0;
          index < Math.min(images.length, itemsToLoadEager);
          index++
        ) {
          images[index]!.loading = "eager";
        }
      });
  });
</script>
