---
import LinkedIn from "@icons/linkedin.svg?raw";
import { addBaseToLink, getLinkName } from "@integrations/astro-server";
import { getMyName, getResumeDocuments, getSummary } from "@integrations/docs";
import { i18n } from "@integrations/i18n-server";
import { getPrintPath } from "@integrations/pdf";
import ProfilePicture from "@pictures/profile-picture.jpg";
import PostPreview from "@post/PostPreview.astro";
import Button from "@ui/Button.astro";
import Fullscreenable from "@ui/Fullscreenable.astro";
import Link from "@ui/Link.astro";
import Text from "@ui/Text.astro";
import type { ComponentProps } from "astro/types";
import Media from "./ui/Media.astro";

interface Props extends ComponentProps<typeof PostPreview> {}

export const mail = "hofermaxludovico@gmail.com";

const t = i18n(Astro);

const viewResumeSentence = await t("View my resume");
const viewWorkHistorySentence = await t("View my work history");

const documentPageLinks = await Promise.all(
  getResumeDocuments(Astro).map(async (documentName) => ({
    path: await addBaseToLink(Astro, `docs/${documentName}`),
    button:
      documentName === "職務経歴書"
        ? viewWorkHistorySentence
        : viewResumeSentence,
  }))
);
const documentLinks = documentPageLinks.map(({ path, ...link }) => ({
  path: `/${getPrintPath(path)}`,
  ...link,
}));

const summary = await getSummary(Astro, true);

const profilePictureEventName = await getLinkName(Astro, ProfilePicture.src);

const myName = await getMyName(Astro);
---

<PostPreview
  contentProps={{ translateProps: { disable: true } }}
  {...Astro.props}
>
  <div slot="header" class="mb-6 flex items-center gap-x-4">
    <Fullscreenable
      class="!max-w-14 !rounded-full hover:scale-125 2xl:!max-w-20"
      noAnimation
      data-umami-event={profilePictureEventName}
      ><Media
        src={ProfilePicture}
        class="rounded-full"
        alt={`Close up of ${myName.rawButOrdered}`}
        loading="eager"
      /></Fullscreenable
    >
    <div>
      <Text tag="h3" translateProps={{ disable: true }}
        >{myName.translated}</Text
      >
      <div class="-ml-0.5 flex items-center gap-0.5 2xl:-ml-1">
        <Link
          href="https://linkedin.com/in/maxludovicohofer"
          class="!size-6 drop-shadow-md hover:drop-shadow-lg active:drop-shadow 2xl:!size-8"
          ><Fragment set:html={LinkedIn} /></Link
        >
      </div>
    </div>
  </div>
  {summary}
  <div slot="footer" class="mt-2 flex gap-0.5">
    {
      (import.meta.env.DEV ? documentPageLinks : documentLinks).map(
        ({ path, button }, index, array) => (
          <Button
            href={path}
            noBase
            class={`${index === 0 ? "" : "h-full rounded-l-none"} ${index === array.length - 1 ? "" : "h-full rounded-r-none"}`}
            translateProps={{ disable: true }}
          >
            <div class="group-hover:animate-pulse">{button}</div>
          </Button>
        )
      )
    }
  </div>
</PostPreview>
