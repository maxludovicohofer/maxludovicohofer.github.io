---
import { matchRoles } from "@integrations/astro-server";
import { i18n, setLocale } from "@integrations/i18n-server";
import { capitalize } from "@integrations/text";
import Text from "@ui/Text.astro";
import type { AstroGlobal } from "astro";
import type { HTMLAttributes } from "astro/types";
import { getCollection } from "astro:content";
import dayjs from "dayjs";
import duration from "dayjs/plugin/duration";
import relativeTime from "dayjs/plugin/relativeTime";

interface Props extends HTMLAttributes<"ol"> {
  compact?: boolean;
}

const { class: className = "", compact, ...props } = Astro.props;

export const getTech = async (astro: AstroGlobal) => {
  const applyMatch = <T,>(matchResult: Partial<Record<any, T[]>>) => {
    // Number from 0-10 that filters out weak matches
    const threshold = 4;
    return Object.entries(matchResult)
      .filter(([matchScore]) => Number(matchScore) > threshold)
      .reverse()
      .flatMap(([_, value]) => value!);
  };

  return await Promise.all(
    applyMatch(await matchRoles(astro, await getCollection("tech"))).map(
      async (tech) => {
        const roleFunctionalities = tech.data.functionalities?.filter(
          (functionality) => typeof functionality !== "string"
        );

        if (roleFunctionalities?.length) {
          const matchedFunctionalities = applyMatch(
            await matchRoles(
              astro,
              roleFunctionalities.map((functionality) => ({
                data: functionality,
              }))
            )
          ).map(({ data }) => data);

          // Filter and map functionalities
          tech.data.functionalities = tech.data.functionalities!.flatMap(
            (functionality) =>
              typeof functionality === "string"
                ? [functionality]
                : matchedFunctionalities.includes(functionality)
                  ? [functionality.id]
                  : []
          );
        }

        return tech;
      }
    )
  );
};

const tech = await getTech(Astro);

const renderedGroups: string[] = [];

// TODO PHASE 2 REFERENCE PROJECTS WHERE THE TECH IS USED. MOST LIKELY SHOW THEM ON HOVER/INTERSECT (MOBILE). COULD BE INDIVIDUAL PROJECTS OR JUST (USED IN 3 GAMES, 2 PROTOTYPES ...)

await setLocale(Astro);
dayjs.extend(duration);
dayjs.extend(relativeTime);

const t = i18n(Astro);

const getExperience = async (experience: string) =>
  `${capitalize(dayjs.duration(experience).humanize())} ${await t("of experience")}`;
---

<ol class={`${className} grid`} {...props}>
  {
    tech.map(async ({ data: { id, experience, group, functionalities } }) => {
      const isGroup = group && !compact;

      if (isGroup) {
        if (renderedGroups.includes(group)) return;
        else renderedGroups.push(group);
      }

      const content = isGroup
        ? tech.filter(
            ({ data: { group: groupToCheck } }) => groupToCheck === group
          )
        : (functionalities?.map((functionality) => ({
            id: functionality,
            data: undefined,
          })) ?? []);

      const rowSpan = (compact ? 1 : content.length) / 8;
      const title = isGroup ? group : id;

      const experienceSentence =
        experience && !isGroup && (await getExperience(experience));

      return (
        <li
          class={`${rowSpan < 2 ? "row-span-1" : rowSpan < 3 ? "row-span-2" : rowSpan < 4 ? "row-span-3" : rowSpan < 5 ? "row-span-4" : "row-span-5"}`}
        >
          <Text tag={compact ? undefined : "h3"} class="inline">
            {title}
          </Text>
          {!compact && (
            <>
              {experienceSentence && (
                <Text subtitle tag="span" translateProps={{ disable: true }}>
                  {experienceSentence}
                </Text>
              )}
              {content.length !== 0 && (
                <ol class="ml-8">
                  {content.map(async (item) => {
                    const experienceSentence =
                      item.data && (await getExperience(item.data.experience));

                    return (
                      <li>
                        <Text tag="span">{item.id}</Text>
                        {experienceSentence && (
                          <Text
                            subtitle
                            tag="span"
                            translateProps={{ disable: true }}
                          >
                            {experienceSentence}
                          </Text>
                        )}
                      </li>
                    );
                  })}
                </ol>
              )}
            </>
          )}
        </li>
      );
    })
  }
</ol>
