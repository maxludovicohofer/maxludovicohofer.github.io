---
import Text from "@layouts/Text.astro";
import type { HTMLAttributes } from "astro/types";
import { getCollection } from "astro:content";
import dayjs from "dayjs";
import duration from "dayjs/plugin/duration";
import relativeTime from "dayjs/plugin/relativeTime";
import { capitalize } from "src/utils";

interface Props extends HTMLAttributes<"ol"> {
  compact?: boolean;
}

const { class: className = "", compact, ...props } = Astro.props;

const tech = await getCollection("tech");

const renderedGroups: string[] = [];

// TODO PHASE 2 REFERENCE PROJECTS WHERE THE TECH IS USED. MOST LIKELY SHOW THEM ON HOVER/INTERSECT (MOBILE). COULD BE INDIVIDUAL PROJECTS OR JUST (USED IN 3 GAMES, 2 PROTOTYPES ...)

dayjs.extend(duration);
dayjs.extend(relativeTime);
---

<ol class={`grid ${className}`} {...props}>
  {
    tech.map(({ data: { id, experience, group, functionalities } }) => {
      const isGroup = group && !compact;

      if (isGroup) {
        if (renderedGroups.includes(group)) return;
        else renderedGroups.push(group);
      }

      const content = isGroup
        ? tech.filter(
            ({ data: { group: groupToCheck } }) => groupToCheck === group
          )
        : (functionalities?.map((functionality) => ({
            id: functionality,
            data: undefined,
          })) ?? []);

      const rowSpan = (compact ? 1 : content.length) / 8;
      const title = isGroup ? group : id;

      return (
        <li
          class={`${rowSpan < 2 ? "row-span-1" : rowSpan < 3 ? "row-span-2" : rowSpan < 4 ? "row-span-3" : rowSpan < 5 ? "row-span-4" : "row-span-5"}`}
        >
          <Text title={!compact} class="inline">
            {title}
          </Text>
          {!compact && (
            <>
              {experience && !isGroup && (
                <Text subtitle class="inline">
                  {capitalize(dayjs.duration(experience).humanize())} of
                  experience
                </Text>
              )}
              {content.length !== 0 && (
                <ol class="ml-8">
                  {content.map((item) => (
                    <li>
                      <Text class="inline">{item.id}</Text>
                      {item.data && (
                        <Text subtitle class="inline">
                          {capitalize(
                            dayjs.duration(item.data.experience).humanize()
                          )}{" "}
                          of experience
                        </Text>
                      )}
                    </li>
                  ))}
                </ol>
              )}
            </>
          )}
        </li>
      );
    })
  }
</ol>
