---
import Text from "@layouts/Text.astro";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import dayjs from "dayjs";
import duration from "dayjs/plugin/duration";
import relativeTime from "dayjs/plugin/relativeTime";
import { toTitleCase } from "src/utils";

const tech = await getCollection("tech");

// TODO PHASE 2 REFERENCE PROJECTS WHERE THE TECH IS USED. MOST LIKELY SHOW THEM ON HOVER/INTERSECT (MOBILE).

const isTechItem = (
  func: NonNullable<CollectionEntry<"tech">["data"]["functionalities"]>[number]
): func is Exclude<
  NonNullable<CollectionEntry<"tech">["data"]["functionalities"]>[number],
  string
> =>
  !!(
    func as Exclude<
      NonNullable<CollectionEntry<"tech">["data"]["functionalities"]>[number],
      string
    >
  ).id;

dayjs.extend(duration);
dayjs.extend(relativeTime);
---

{
  tech?.map(({ data: { id, experience, functionalities } }) => {
    const rowSpan = (functionalities?.length ?? 0) / 8;

    return (
      <li
        class={`${rowSpan < 2 ? "row-span-1" : rowSpan < 3 ? "row-span-2" : rowSpan < 4 ? "row-span-3" : rowSpan < 5 ? "row-span-4" : "row-span-5"}`}
      >
        <Text title className="inline">
          {id}
        </Text>
        {experience && (
          <Text subtitle className="inline">
            {toTitleCase(dayjs.duration(experience).humanize())} of experience
          </Text>
        )}
        {functionalities && functionalities.length !== 0 && (
          <ol class="ml-8">
            {functionalities.map((func) => (
              <li>
                <Text className="inline">
                  {isTechItem(func) ? func.id : func}
                </Text>
                {isTechItem(func) && (
                  <Text subtitle className="inline">
                    {toTitleCase(dayjs.duration(func.experience).humanize())} of
                    experience
                  </Text>
                )}
              </li>
            ))}
          </ol>
        )}
      </li>
    );
  })
}
