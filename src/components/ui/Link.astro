---
import {
  getLinkName,
  getMaximumWordsInLimit,
  isRemoteLink,
} from "@integrations/text";
import { localizeHref } from "@integrations/astro";
import type { AstroGlobal } from "astro";
import type { HTMLAttributes } from "astro/types";

interface Props extends HTMLAttributes<"a"> {
  noStyle?: boolean;
  prefetch?: "viewport" | "load" | "hover";
  noEvent?: boolean;
  noLocalization?: boolean;
}

const {
  class: className = "",
  href,
  noStyle,
  prefetch = "viewport",
  noEvent,
  noLocalization,
  "data-umami-event": umamiEvent,
  ...props
} = Astro.props;

export const formatUmamiEvent = (astro: AstroGlobal, eventName: string) => {
  // Max characters - formatting characters
  const usableCharacters = 50 - 3;

  const pageName = getMaximumWordsInLimit(
    getLinkName(astro.url.pathname) || "Homepage",
    usableCharacters * 0.2
  );

  return `${getMaximumWordsInLimit(
    eventName,
    usableCharacters - pageName.length
  )} (${pageName})`;
};

export interface UmamiLinkEvent {
  "data-umami-event"?: string;
  "data-umami-event-url"?: Props["href"];
}

export const getUmamiLinkEvent = async (
  astro: AstroGlobal,
  href?: Props["href"]
): Promise<UmamiLinkEvent> => {
  const getAnchorName = async () => {
    const anchor = await astro.slots.render("default");
    return anchor?.trim().search(/^<[\S\s]+>$/) !== -1
      ? getLinkName(href?.toString() ?? "")
      : anchor;
  };

  if (
    href &&
    !href.toString().startsWith("http") &&
    !href.toString().includes(".")
  ) {
    // Local link, already tracked by Umami
    return {};
  }

  return {
    "data-umami-event":
      astro.props["data-umami-event"] ?? (await getAnchorName()),
    ...(href ? { "data-umami-event-url": href } : {}),
  };
};

const umamiEventInfo = noEvent ? {} : await getUmamiLinkEvent(Astro, href);

if (umamiEventInfo["data-umami-event"]) {
  umamiEventInfo["data-umami-event"] = formatUmamiEvent(
    Astro,
    umamiEventInfo["data-umami-event"]
  );
}

const isRemote = href ? isRemoteLink(href.toString()) : false;
---

<a
  class={`${className} ${
    noStyle
      ? ""
      : "text-current font-normal underline hover:text-yellow-400 active:text-yellow-600 dark:hover:text-yellow-200 dark:active:text-yellow-400 hover:text-[1.2em] hover:scale-125 active:scale-90 active:text-[0.8em] duration-150"
  }`}
  href={noLocalization || isRemote || href === undefined
    ? href
    : localizeHref(Astro, href?.toString())}
  data-astro-prefetch={prefetch}
  target={isRemote ? "_blank" : "_self"}
  rel={isRemote ? "noopener noreferrer" : undefined}
  {...umamiEventInfo}
  {...props}><slot /></a
>
