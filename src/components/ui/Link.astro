---
import { defaultLocale } from "@integrations/astro-config";
import { addBaseToLink, getLinkName } from "@integrations/astro-server";
import { i18n } from "@integrations/i18n-server";
import {
  getMaximumWordsInLimit,
  isFileLink,
  isGeoLink,
  isMailLink,
  isRemoteLink,
  isTelLink,
  standardizePath,
} from "@integrations/text";
import type { AstroGlobal } from "astro";
import type { HTMLAttributes } from "astro/types";

interface Props extends HTMLAttributes<"a"> {
  noStyle?: boolean;
  prefetch?: "viewport" | "load" | "hover";
  noEvent?: boolean;
  noBase?: boolean;
  noLocale?: boolean;
}

const {
  class: className = "",
  href,
  noStyle,
  prefetch = "viewport",
  noEvent,
  noBase,
  noLocale,
  "data-umami-event": umamiEvent,
  ...props
} = Astro.props;

const t = i18n(Astro);

export const formatUmamiEvent = async (
  astro: AstroGlobal,
  eventName: string
) => {
  // Max characters - formatting characters
  const usableCharacters = 50 - 3;

  const pageName = getMaximumWordsInLimit(
    await getLinkName(astro, astro.originPathname),
    usableCharacters * 0.2
  );

  return `${getMaximumWordsInLimit(
    eventName,
    usableCharacters - pageName.length
  )} (${pageName})`;
};

export interface UmamiLinkEvent {
  "data-umami-event"?: string;
  "data-umami-event-url"?: Props["href"];
}

export const getUmamiLinkEvent = async (
  astro: AstroGlobal,
  href?: Props["href"]
): Promise<UmamiLinkEvent> => {
  const getAnchorName = async () => {
    const content = astro.slots.has("default")
      ? (await astro.slots.render("default")).trim()
      : undefined;
    return !content || /^<[\S\s]+>$/.test(content)
      ? await getLinkName(astro, href?.toString() ?? "")
      : content;
  };

  if (
    !href ||
    (!href.toString().startsWith("http") && !href.toString().includes("."))
  ) {
    // Local link, already tracked by Umami
    return {};
  }

  return {
    "data-umami-event":
      astro.props["data-umami-event"] ?? (await getAnchorName()),
    ...(href ? { "data-umami-event-url": href } : {}),
  };
};

const umamiEventInfo = noEvent ? {} : await getUmamiLinkEvent(Astro, href);

if (umamiEventInfo["data-umami-event"] !== undefined) {
  umamiEventInfo["data-umami-event"] = await formatUmamiEvent(
    Astro,
    umamiEventInfo["data-umami-event"]
  );
}

const hrefString = href?.toString();

const isExternal =
  hrefString &&
  (isRemoteLink(hrefString) ||
    isMailLink(hrefString) ||
    isTelLink(hrefString) ||
    isGeoLink(hrefString));
---

<a
  class={`${className} ${
    noStyle
      ? ""
      : `not-prose underline print:no-underline text-nowrap hover:text-yellow-400 active:text-yellow-600 dark:hover:text-yellow-200 dark:active:text-yellow-400 decoration-yellow-400 dark:decoration-yellow-200 hover:decoration-inherit print:decoration-inherit  hover:text-[1.2em] hover:scale-125 active:scale-90 active:text-[0.8em] duration-150 ${isExternal ? "break-all" : ""}`
  }`}
  href={isExternal || href === undefined || href === null
    ? href
    : noBase
      ? standardizePath(href.toString())
      : await addBaseToLink(Astro, href?.toString(), noLocale)}
  target={isExternal ? "_blank" : "_self"}
  rel={isExternal ? "noopener noreferrer" : undefined}
  data-astro-prefetch={!hrefString || isExternal || isFileLink(hrefString)
    ? undefined
    : prefetch}
  {...umamiEventInfo}
  {...props}
  {...Astro.slots.has("default") ? {} : { translate: "no" }}
  ><slot
    >{
      hrefString
        ? (await getLinkName(Astro, hrefString, true)).toLocaleLowerCase(
            defaultLocale
          )
        : await t("Link")
    }</slot
  ></a
>
