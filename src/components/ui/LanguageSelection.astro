---
import { locales } from "@integrations/astro-config.mts";
import { getLanguageName } from "@integrations/i18n-server";
import { getRelativeLocaleUrl } from "astro:i18n";
import { standardizePath } from "@integrations/text";
import { getCurrentLocale } from "@integrations/i18n-server";
import Button from "./Button.astro";
import type { HTMLAttributes } from "astro/types";
import LanguageButton from "./LanguageButton.astro";
import { getPathWithoutLocale } from "@integrations/i18n";

interface Props extends HTMLAttributes<"div"> {
  hasBack?: boolean;
}

const { class: className = "", hasBack, ...props } = Astro.props;

const currentLocale = getCurrentLocale(Astro);
const translateLocales = locales.filter((locale) => locale !== currentLocale);
const multipleChoice = translateLocales.length > 1;
---

<div
  class={`${className} absolute ${hasBack ? "top-6 lg:top-12 right-6" : "top-4 right-4"} size-full flex flex-col items-end pointer-events-none`}
  {...props}
>
  <div class="locale-select-surface grid gap-4 pointer-events-auto">
    {multipleChoice && <LanguageButton />}
    {
      translateLocales.map((locale) => (
        <Button
          rounded
          linkClass="locale-anchor"
          class={`locale-link ${multipleChoice ? "hidden" : ""} !text-xs`}
          href={standardizePath(
            getRelativeLocaleUrl(
              locale,
              getPathWithoutLocale(Astro.url.pathname)
            )
          )}
          noBase
          translateProps={{
            disable: true,
          }}
          prefetch="hover"
        >
          {getLanguageName(locale)}
        </Button>
      ))
    }
  </div>
</div>
<script>
  import { getLocaleFromPath, getPathWithoutLocale } from "@integrations/i18n";
  import { getPreferredLocale, addLocaleToLink } from "@integrations/i18n";

  document.addEventListener("astro:page-load", () => {
    const preferredLocale = getPreferredLocale();
    const path = window.location.pathname;
    if (preferredLocale !== getLocaleFromPath(path)) {
      window.location.replace(
        `/${addLocaleToLink(getPathWithoutLocale(path), preferredLocale)}`
      );
    }

    document
      .querySelectorAll<HTMLAnchorElement>(".locale-anchor")
      .forEach((link) =>
        link.addEventListener("click", () => {
          localStorage.setItem(
            "language",
            getLocaleFromPath(new URL(link.href).pathname)
          );

          history.replaceState(history.state, "", link.href);
        })
      );
  });
</script>
