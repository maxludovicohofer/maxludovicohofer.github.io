---
import type { ComponentProps } from "astro/types";
import Button from "./Button.astro";
import Text from "./Text.astro";

interface Props extends ComponentProps<typeof Button> {}
---

<Button
  outline
  rounded
  class="locale-select opacity-100"
  translateProps={{
    disable: true,
  }}
  {...Astro.props}
  ><Text
    importance="button"
    format="branded-button"
    class="lang-button mb-0.5 shadow-zinc-400 dark:shadow-zinc-400"
    translateProps={{ disable: true }}>üåê</Text
  ><style>
    .lang-button {
      font-family:
        "Apple Color Emoji", "Segoe UI Emoji", "Noto Color Emoji", sans-serif;
      -webkit-text-fill-color: transparent; /* ensures transparency works */
      -webkit-background-clip: text; /* clips background to text */
    }
  </style></Button
>
<script>
  document.addEventListener("astro:page-load", () => {
    const localeButtons =
      document.querySelectorAll<HTMLButtonElement>(".locale-link");

    const localeSelect = document.querySelector<HTMLElement>(".locale-select")!;

    const showLocales = () => {
      localeSelect.classList.replace("opacity-100", "opacity-0");
      localeSelect.classList.add("hidden");

      localeButtons.forEach((link) => {
        link.classList.replace("opacity-0", "opacity-100");
        link.classList.remove("hidden");
      });
    };

    const hideLocales = () => {
      localeSelect.classList.replace("opacity-0", "opacity-100");
      localeSelect.classList.remove("hidden");

      localeButtons.forEach((link) => {
        link.classList.replace("opacity-100", "opacity-0");
        link.classList.add("hidden");
      });
    };

    localeSelect.addEventListener("mouseenter", () => {
      showLocales();

      const localeSelectSurface = document.querySelector<HTMLElement>(
        ".locale-select-surface"
      )!;

      const mouseLeaveHideLocales = () => {
        setTimeout(() => {
          if (!localeSelectSurface.matches(":hover")) {
            hideLocales();

            localeSelectSurface.removeEventListener(
              "mouseleave",
              mouseLeaveHideLocales
            );
          }
        }, 500);
      };

      localeSelectSurface.addEventListener("mouseleave", mouseLeaveHideLocales);
    });

    localeSelect.addEventListener("pointerdown", () => {
      localeButtons.forEach((link) => (link.disabled = true));

      showLocales();

      setTimeout(
        () => localeButtons.forEach((link) => (link.disabled = false)),
        600
      );

      const closeLocales = (e: PointerEvent) => {
        // Prevent closing if a locale button was clicked
        if (
          !localeSelect.contains(e.target as Node) &&
          !(
            e.target instanceof HTMLButtonElement &&
            e.target.classList.contains("locale-link")
          )
        ) {
          hideLocales();

          document.removeEventListener("pointerdown", closeLocales);
        }
      };

      // Prevent pointerdown on locale buttons from bubbling up and closing the menu
      localeButtons.forEach((link) =>
        link.addEventListener("pointerdown", (event) => event.stopPropagation())
      );

      document.addEventListener("pointerdown", closeLocales);
    });
  });
</script>
