---
import type { ComponentProps } from "astro/types";
import Button from "./Button.astro";

interface Props extends ComponentProps<typeof Button> {
  "data-umami-event": string;
  noAnimation?: boolean;
}

const { class: className = "", noAnimation, ...buttonProps } = Astro.props;
---

<Button
  noRounding
  fullHeight
  class={`can-fullscreen ${className} flex items-center justify-center overflow-hidden !bg-transparent`}
  {...noAnimation ? { "data-no-animation": "" } : {}}
  {...buttonProps}><slot /></Button
>
<script>
  import type { LiteYTEmbed } from "lite-youtube-embed";
  import {
    activateModal,
    getAspectClass,
    getAspectRatio,
    isLiteYouTube,
    removeFromClasses,
    switchClasses,
  } from "@integrations/utils";

  async function setFullscreenMedia(this: HTMLButtonElement) {
    const modal = document.querySelector<HTMLDivElement>("div.modal")!;

    if (modal.childElementCount) return;

    const originalMedia = this.querySelector("img, lite-youtube") as
      | HTMLImageElement
      | LiteYTEmbed
      | undefined;

    if (!originalMedia) return;

    const fullscreenMedia = originalMedia.cloneNode(
      true
    ) as typeof originalMedia;

    fullscreenMedia.className = removeFromClasses(fullscreenMedia.className, [
      "size",
      "w",
      "h",
      "pointer-events",
      "object",
    ]);
    fullscreenMedia.style.maxWidth = "inherit";
    fullscreenMedia.style.maxHeight = "inherit";

    let noAnimation = false;

    if (isLiteYouTube(fullscreenMedia)) {
      const aspect = fullscreenMedia.dataset.aspectRatio!;
      fullscreenMedia.classList.add(getAspectClass(aspect));
      const aspectRatio = getAspectRatio(aspect);

      // Adapt to modal slot
      const observer = new ResizeObserver((entries) =>
        entries.forEach(({ target }) =>
          switchClasses(
            fullscreenMedia,
            target.clientWidth / target.clientHeight > aspectRatio,
            ["h-screen"],
            ["w-screen"]
          )
        )
      );

      observer.observe(
        document.querySelector<HTMLDivElement>("div.modal-slot")!
      );

      const iframe = fullscreenMedia.querySelector("iframe");

      if (!iframe) return;

      // Set fullscreen iframe params
      iframe.src = iframe.src
        .replace("controls=0", "controls=1")
        .replace("disablekb=1", "disablekb=0")
        .replace("autoplay=0", "autoplay=1");

      const originalPlayer = (await (
        originalMedia as LiteYTEmbed
      ).getYTPlayer())!;

      const playerState = originalPlayer.getPlayerState();

      const startTime =
        playerState === YT.PlayerState.UNSTARTED ||
        playerState === YT.PlayerState.BUFFERING
          ? Number(
              sessionStorage.getItem(
                `video/${fullscreenMedia.getAttribute("videoid")!}`
              ) ?? 0
            )
          : originalPlayer.getCurrentTime();

      iframe.src = `${iframe.src.replace(/&start=\d+/, "")}&start=${startTime.toFixed()}`;

      // Pause original video to save resources
      originalMedia.setAttribute("data-modal-original", "true");
      originalPlayer.pauseVideo();

      noAnimation = true;
    } else {
      fullscreenMedia.classList.add(
        fullscreenMedia.src.split(".").at(-1)!.endsWith("svg")
          ? "size-screen"
          : "size-auto"
      );
    }

    activateModal(
      fullscreenMedia,
      this.dataset.noAnimation !== undefined || noAnimation
    );
  }

  document.addEventListener("astro:page-load", () =>
    document
      .querySelectorAll<HTMLButtonElement>("button.can-fullscreen")
      .forEach((fullImage) =>
        fullImage.addEventListener("click", setFullscreenMedia)
      )
  );

  document.addEventListener("astro:before-swap", () =>
    document
      .querySelectorAll<HTMLButtonElement>("button.can-fullscreen")
      .forEach((fullImage) =>
        fullImage.removeEventListener("click", setFullscreenMedia)
      )
  );
</script>
