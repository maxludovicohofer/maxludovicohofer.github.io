---
import type { getPostCover } from "@post/Post.astro";
import { Image, type ImgAttributes } from "astro:assets";
import type { ComponentProps } from "astro/types";
import Video from "./Video.astro";
import type { imageExtensions } from "@integrations/utils";

interface MarkdownImage {
  src: string;
  width: number;
  height: number;
  format: (typeof imageExtensions)[number];
}

interface Props
  extends Omit<ComponentProps<typeof Video>, "src" | "youTubeInfo"> {
  src: NonNullable<ReturnType<typeof getPostCover>> | MarkdownImage | string;
  alt: string;
  aspect?: ComponentProps<typeof Video>["youTubeInfo"]["aspect"];
  loading?: ImgAttributes["loading"];
}

const {
  src,
  alt,
  aspect,
  class: className = "",
  loading = "lazy",
  ...props
} = Astro.props;

export function isEmbed(video: typeof src): video is string {
  return (
    typeof video === "string" && new URL(video).hostname.endsWith("youtube.com")
  );
}

export function isVideo(
  video: typeof src
): video is ComponentProps<typeof Video>["youTubeInfo"] {
  return (
    !!(video as ComponentProps<typeof Video>["youTubeInfo"]).id ||
    isEmbed(video)
  );
}

function isMarkdownImage(image: typeof src): image is MarkdownImage {
  return !!(image as MarkdownImage).src;
}

const asMarkdownImage = isMarkdownImage(src) ? src : undefined;

const mediaClass = `${className} size-full ${asMarkdownImage?.format === "svg" ? "bg-zinc-300" : "object-cover"} pointer-events-none`;
---

{
  isVideo(src) ? (
    <Video
      youTubeInfo={
        isEmbed(src) ? { id: new URL(src).searchParams.get("v")!, aspect } : src
      }
      class={mediaClass}
      {...props}
    />
  ) : (
    <Image
      src={isMarkdownImage(src) ? src : typeof src === "string" ? src : src()}
      alt={alt}
      class={mediaClass}
      loading={loading}
      {...(props as any)}
    />
  )
}
