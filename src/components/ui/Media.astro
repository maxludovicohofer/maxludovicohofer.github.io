---
import {
  Image,
  type ImgAttributes,
  type LocalImageProps,
  type RemoteImageProps,
} from "astro:assets";
import type { ComponentProps } from "astro/types";
import Video from "./Video.astro";
import { getAspectClass } from "@integrations/tailwind";
import { i18n } from "@integrations/i18n-server";
import { endDelimiter } from "@integrations/text";

interface Props
  extends Omit<ComponentProps<typeof Video>, "src" | "youTubeInfo"> {
  src:
    | string
    | LocalImageProps["src"]
    | RemoteImageProps["src"]
    | ComponentProps<typeof Video>["youTubeInfo"];
  alt: string;
  aspect?: ComponentProps<typeof Video>["youTubeInfo"]["aspect"];
  loading?: ImgAttributes["loading"];
  smoothLoading?: boolean;
}

const {
  src,
  alt,
  aspect,
  class: className = "",
  loading = "lazy",
  smoothLoading,
  ...props
} = Astro.props;

const t = i18n(Astro);

export function isEmbed(video: typeof src): video is string {
  return (
    typeof video === "string" && new URL(video).hostname.endsWith("youtube.com")
  );
}

export function isVideo(
  video: typeof src,
): video is ComponentProps<typeof Video>["youTubeInfo"] {
  return (
    !!(video as ComponentProps<typeof Video>["youTubeInfo"]).id ||
    isEmbed(video)
  );
}

function isMarkdownImage(image: typeof src): image is ImageMetadata {
  return !!(image as ImageMetadata).src;
}

const asMarkdownImage = isMarkdownImage(src) ? src : undefined;

const mediaClass = `${className} size-full ${asMarkdownImage?.format === "svg" ? "bg-zinc-300" : "object-cover"} pointer-events-none ${smoothLoading && loading === "lazy" ? "opacity-0 duration-700" : ""}`;
---

{
  isVideo(src) ? (
    <Video
      youTubeInfo={
        isEmbed(src) ? { id: new URL(src).searchParams.get("v")!, aspect } : src
      }
      class={mediaClass}
      {...props}
    />
  ) : (
    <Image
      src={src}
      alt={await t(endDelimiter(alt))}
      class={`${mediaClass} ${aspect ? getAspectClass(aspect) : ""}`}
      loading={loading}
      {...(props as any)}
    />
  )
}
<script>
  const showMedia = (media: Element) => media.classList.remove("opacity-0");

  // TODO PHASE 2 Not working in iOS safari, animation flickers. Fix
  document.addEventListener("astro:page-load", () => {
    // Handle images
    document.querySelectorAll("img").forEach((image) => {
      if (!image.classList.contains("opacity-0")) return;

      if (image.complete) {
        showMedia(image);
        return;
      }

      image.addEventListener("load", () => showMedia(image), {
        once: true,
      });
    });
  });
</script>
