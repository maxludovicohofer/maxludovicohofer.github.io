---
import PostMedia from "@post/PostMedia.astro";
import type { ComponentProps } from "astro/types";

interface Props extends ComponentProps<typeof PostMedia> {
  top?: boolean;
}

const { class: className = "", alt, top, ...props } = Astro.props;

const getAttribute = (
  altText: string,
  attribute: string,
  isBoolean?: boolean
) => {
  const attributeRegex = new RegExp(
    `(^|\\s)${attribute.toUpperCase()}${isBoolean ? "(?=($|\\s))" : "\\s\\S+"}`
  );
  const valueIndex = altText.search(attributeRegex);

  return {
    value:
      valueIndex !== -1
        ? isBoolean
          ? "true"
          : altText.slice(valueIndex).trimStart().split(" ")[1]
        : undefined,
    cleanedAlt: altText.replace(attributeRegex, "").trimStart(),
  };
};

const { value: eagerValue, cleanedAlt: altWithoutEager } = getAttribute(
  alt,
  "EAGER",
  true
);

const { value: aspectValue, cleanedAlt: altWithoutAspect } =
  props.aspect !== undefined
    ? { value: props.aspect, cleanedAlt: altWithoutEager }
    : getAttribute(altWithoutEager, "ASPECT");

const { value: topValue, cleanedAlt: altWithoutTop } =
  top !== undefined
    ? { value: top, cleanedAlt: altWithoutAspect }
    : getAttribute(altWithoutAspect, "TOP", true);
---

<PostMedia
  alt={altWithoutTop}
  class={`${className} h-[40vh] ${aspectValue ? "!w-auto" : ""}`}
  outerProps={{ class: topValue ? "!mt-0 mb-6" : "", translate: "no" }}
  loading={eagerValue ? "eager" : undefined}
  aspect={aspectValue as ComponentProps<typeof PostMedia>["aspect"]}
  {...props}
/>
