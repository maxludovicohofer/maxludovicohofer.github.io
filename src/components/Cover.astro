---
import Fullscreenable from "@layouts/Fullscreenable.astro";
import type { getPostCover, PostCollection } from "@layouts/Post.astro";
import Video from "@layouts/Video.astro";
import type { ComponentProps } from "astro/types";
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";

interface Props {
  cover: NonNullable<ReturnType<typeof getPostCover>>;
  className: string;
  entry: CollectionEntry<PostCollection> | undefined;
}

const { cover, className = "", entry } = Astro.props;

export function isVideoCover(
  cover: ReturnType<typeof getPostCover>
): cover is ComponentProps<typeof Video>["youTubeInfo"] {
  return !!(cover as ComponentProps<typeof Video>["youTubeInfo"])?.id;
}

const coverMediaClass = "size-full object-cover pointer-events-none";
---

<Fullscreenable className={`cover-media ${className}`}>
  {
    isVideoCover(cover) ? (
      <Video youTubeInfo={cover} className={coverMediaClass} trackTime />
    ) : (
      <Image
        src={cover()}
        class={coverMediaClass}
        alt={
          entry?.collection === "projects"
            ? entry.data.description
            : `Graphic explanation of "${entry!.data.title}"`
        }
        loading="eager"
      />
    )
  }
</Fullscreenable>
<script>
  const updateCover = (cover: HTMLElement) => {
    if (!cover.checkVisibility()) return;

    const scrollPercent = Math.min(scrollY / cover.offsetHeight, 1);
    cover.style.opacity = `${1 - scrollPercent}`;

    const parallaxSpeed = 6;
    cover.style.setProperty(
      "--tw-translate-y",
      `-${parallaxSpeed * scrollPercent}rem`
    );
    cover.style.transform = `translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))`;
  };

  let covers: NodeListOf<HTMLElement>;

  const updateCovers = () => covers.forEach(updateCover);

  document.addEventListener("astro:page-load", () => {
    covers = document.querySelectorAll<HTMLElement>(".cover-media");
    if (!covers.length) return;

    const observer = new ResizeObserver((entries) =>
      entries.forEach(({ target }) => updateCover(target as HTMLElement))
    );
    covers.forEach((cover) => observer.observe(cover));

    addEventListener("scroll", updateCovers);
  });

  document.addEventListener("astro:before-swap", () =>
    removeEventListener("scroll", updateCovers)
  );
</script>
