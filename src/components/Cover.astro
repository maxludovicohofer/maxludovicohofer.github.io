---
import Fullscreenable from "@layouts/Fullscreenable.astro";
import type { getPostCover } from "@layouts/Post.astro";
import Video from "@layouts/Video.astro";
import type { ComponentProps } from "astro/types";
import { Image } from "astro:assets";
import type { CollectionKey } from "astro:content";
import type { CollectionEntry } from "astro:content";

interface Props {
  cover: NonNullable<ReturnType<typeof getPostCover>>;
  className: string;
  entry: CollectionEntry<CollectionKey> | undefined;
  mobile?: boolean;
}

const { cover, className = "", entry, mobile } = Astro.props;

export function isVideoCover(
  cover: ReturnType<typeof getPostCover>
): cover is ComponentProps<typeof Video>["youTubeInfo"] {
  return !!(cover as ComponentProps<typeof Video>["youTubeInfo"])?.id;
}

const coverClass = `${mobile ? "w-screen h-[45vh] -mt-[9vh] active:rounded-3xl" : "rounded-3xl max-h-[40vh]"}`;

const coverMediaClass = "object-cover size-full pointer-events-none";

// TODO MAKE VIDEO PAUSABLE AND FULLSCREENABLE IN POST, ALSO SAME INTERACTIVITY AS FULLIMAGE
---

<div
  class={`cover-media ${className} ${mobile ? "lg:invisible fixed" : "invisible lg:visible absolute top-12 left-0 right-0 mx-auto"}`}
>
  <Fullscreenable className={coverClass}>
    {
      isVideoCover(cover) ? (
        <Video youTubeInfo={cover} className={coverMediaClass} />
      ) : (
        <Image
          src={cover()}
          class={coverMediaClass}
          alt={
            entry?.collection === "projects"
              ? entry.data.description
              : `Graphic explanation of "${entry!.data.title}"`
          }
          loading="eager"
        />
      )
    }
  </Fullscreenable>
</div>
<script>
  addEventListener("scroll", () => {
    document.querySelectorAll<HTMLElement>(".cover-media").forEach((cover) => {
      if (!cover.checkVisibility()) return;

      // TODO PHASE 2 PARALLAX (MOVE WITH TRANSLATE Y ON SCROLL)
      cover.style.opacity = `${1 - Math.min(scrollY / cover.offsetHeight, 1)}`;
    });
  });
</script>
