---
import Link from "@components/ui/Link.astro";
import Text from "@components/ui/Text.astro";
import { capitalize, toTextList, endDot } from "@integrations/text";
import type dayjs from "dayjs";
import { getFormattedDates } from "./ResumeKnowHow.astro";
import { i18n } from "@integrations/i18n-server";
import type { ReferenceDataEntry } from "astro:content";
import type { ComponentProps } from "astro/types";
import type { compactTechList } from "@integrations/content";

interface Props {
  start: dayjs.Dayjs;
  end?: dayjs.Dayjs | undefined;
  roles: ReferenceDataEntry<"roles">[];
  responsibilities: string[];
  points: string[];
  link?: ComponentProps<typeof Link>["href"] | undefined;
  tech: ReturnType<typeof compactTechList>;
  projectType?: string | undefined;
  team: { internal: number; external: number };
}

const {
  start,
  end,
  roles,
  responsibilities,
  points,
  link,
  tech,
  projectType,
  team,
} = Astro.props;

const t = i18n(Astro);

const dates = await getFormattedDates(Astro, start, end);
const type = projectType && (await t(projectType));
const soloDeveloped = !team || (team.internal === 1 && !team.external);
const scaleText = soloDeveloped
  ? await t("Solo")
  : `${team.internal + team.external}名${team.external ? `（うち外注スタッフ${team.external}名）` : ""}`;

const rolesSentence = `${await t(endDot(capitalize(toTextList(roles.slice(0, 3).map(({ id }) => id)))))}`;
const responsibilitiesSentence = `${await t(endDot(capitalize(toTextList(responsibilities.slice(0, 3)))))}`;
const linkText = await t("Read development");
---

<tr>
  <td>
    [期間]
    <br />
    {dates.join("～")}
    <br />
    <br />
    [規模]
    <br />
    {scaleText}
    {
      type && (
        <>
          <br />
          <br />
          [プロジェクト]
          <br />
          {type}
        </>
      )
    }
  </td>
  <td>
    [役職] {rolesSentence}
    <br />
    [職責] {responsibilitiesSentence}
    <br />
    <br />
    [ポイント]
    <ul class="mt-0 last:-mb-2">
      {
        points
          .slice(0, 3)
          .map((point) => <Text tag="li">{endDot(capitalize(point))}</Text>)
      }
    </ul>
    {
      link && (
        <div class="-mt-4 text-right">
          <Link class="!text-wrap" href={link}>
            {linkText}
          </Link>
        </div>
      )
    }
  </td>
  <td>
    <ul class="list-none ps-0 my-0">
      {tech.map(({ title }) => <li class="my-0 ps-0">{title}</li>)}
    </ul>
  </td>
</tr>
