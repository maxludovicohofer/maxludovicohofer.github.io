---
import Text from "@components/ui/Text.astro";
import { getKnowHow, getResumeKey } from "@integrations/content";
import { i18n, setDayjsLocale } from "@integrations/i18n-server";
import { getLocaleInfo } from "@integrations/i18n-special";
import { capitalize, endDelimiter } from "@integrations/text";
import type { AstroGlobal } from "astro";
import type { HTMLAttributes } from "astro/types";
import dayjs from "dayjs";
import duration from "dayjs/plugin/duration";

interface Props extends HTMLAttributes<"div"> {
  section?: keyof Awaited<ReturnType<typeof getKnowHow>>;
  maxAchievements?: number;
}

const { section, maxAchievements, ...props } = Astro.props;

export const getFormattedDates = async (
  astro: AstroGlobal,
  start: dayjs.Dayjs,
  end?: dayjs.Dayjs
) => {
  await setDayjsLocale(astro);
  dayjs.extend(duration);

  const today = dayjs();
  const dates = [start, end ?? today] as const;

  const dropDayDate = today.subtract(
    dayjs.duration({ months: 1 }).asMilliseconds()
  );
  const showDay =
    dates[1].diff(dates[0], "month") < 1 ||
    dates.some((date) => date > dropDayDate);

  const dropMonthDate = today.subtract(
    dayjs.duration({ years: 5 }).asMilliseconds()
  );
  const showMonth =
    dates[1].diff(dates[0], "year") < 1 ||
    dates.some((date) => date > dropMonthDate);

  const { getYear, getYearMonth } = getLocaleInfo(astro);

  return dates.map((date) => {
    if (date === today) return "Present";

    if (showDay) return date.format("ll");

    if (showMonth) return getYearMonth(date.format("ll"));

    return getYear(date.format("LL"));
  });
};

const t = i18n(Astro);

const knowHow = await getKnowHow(Astro);
---

{
  Object.entries(knowHow)
    .filter(([title]) => !section || title === section)
    .map(([title, experiences]) => (
      <div {...props}>
        <Text tag="h2">{capitalize(title)}</Text>
        <ol class="list-none ps-0">
          {experiences
            .filter((experience) => !experience?.[getResumeKey(Astro)]?.omit)
            .map(
              async ({
                skill: { job, achievements },
                id,
                school,
                countAsExperience,
                start,
                end,
                translateId,
                dropOut,
                ...experience
              }) => {
                const translatedId = translateId
                  ? await t(capitalize(id))
                  : capitalize(id);
                const comma = `${await t(",")} `;
                const dates = await getFormattedDates(Astro, start, end);

                const multipleJobs = job.id === "technical lead";

                return (
                  <li class="ps-0">
                    <Text
                      tag="h4"
                      subtitle
                      translateProps={{ disable: true }}
                      class="mb-0"
                    >
                      {translatedId}
                    </Text>
                    <Text tag="h3" class="!-mb-1">
                      {capitalize(job.id)}
                      {countAsExperience && school ? " (school)" : ""}
                      {dropOut ? " (not graduated)" : ""}
                    </Text>
                    <Text tag="em" subtitle translateProps={{ disable: true }}>
                      {dates.join(" - ")}
                    </Text>
                    {!experience?.[getResumeKey(Astro)]?.short && (
                      <ol class="list-disc">
                        {achievements
                          .slice(0, maxAchievements ?? undefined)
                          .map((achievement) => (
                            <Text tag="li">
                              {capitalize(endDelimiter(achievement))}
                            </Text>
                          ))}
                      </ol>
                    )}
                  </li>
                );
              }
            )}
        </ol>
      </div>
    ))
}
