---
import Text from "@components/ui/Text.astro";
import { getKnowHow, getResumeKey } from "@integrations/content";
import { i18n, setDayjsLocale } from "@integrations/i18n-server";
import { getLocaleInfo } from "@integrations/i18n-special";
import { capitalize, endDelimiter, toTextList } from "@integrations/text";
import type { AstroGlobal } from "astro";
import type { HTMLAttributes } from "astro/types";
import dayjs from "dayjs";
import duration from "dayjs/plugin/duration";

interface Props
  extends HTMLAttributes<"div">,
    NonNullable<Parameters<typeof getKnowHow>[1]> {
  section?: keyof Awaited<ReturnType<typeof getKnowHow>>;
  maxAchievements?: number;
  hideDates?: boolean;
}

const { section, maxAchievements, hideDates, ...props } = Astro.props;

export const getFormattedDates = async (
  astro: AstroGlobal,
  start: dayjs.Dayjs,
  end?: dayjs.Dayjs
) => {
  await setDayjsLocale(astro);
  dayjs.extend(duration);

  const today = dayjs();
  const dates = [start, end ?? today] as const;

  const dropDayDate = today.subtract(
    dayjs.duration({ months: 1 }).asMilliseconds()
  );
  const showDay =
    dates[1].diff(dates[0], "month") < 1 ||
    dates.some((date) => date !== today && date > dropDayDate);

  const dropMonthDate = today.subtract(
    dayjs.duration({ years: 5 }).asMilliseconds()
  );
  const showMonth =
    dates[1].diff(dates[0], "year") < 1 ||
    dates.some((date) => date !== today && date > dropMonthDate);

  const { getYear, getYearMonth } = getLocaleInfo(astro);

  const t = i18n(astro);

  return await Promise.all(
    dates.map(async (date) => {
      if (date === today) return capitalize(await t("present"));

      if (showDay) return date.format("ll");

      if (showMonth) return capitalize(getYearMonth(date.format("ll")));

      return getYear(date.format("LL"));
    })
  );
};

export const getFormattedKnowHow = async (
  astro: AstroGlobal,
  props?: Props
) => {
  const t = i18n(astro);

  const knowHow = await getKnowHow(astro, props);

  return await Promise.all(
    Object.entries(knowHow)
      .filter(([title]) => !props?.section || title === props.section)
      .map(
        async ([_, experiences]) =>
          await Promise.all(
            experiences
              .filter((experience) => !experience?.[getResumeKey(astro)]?.omit)
              .map(
                async ({
                  skills,
                  id,
                  school,
                  start,
                  end,
                  translateId,
                  dropOut,
                  ...experience
                }) => {
                  return {
                    translatedId: translateId
                      ? await t(capitalize(id))
                      : capitalize(id),
                    sections: await Promise.all(
                      skills.map(
                        async (
                          { job, start: skillStart, achievements },
                          index
                        ) => {
                          const dates = await getFormattedDates(
                            astro,
                            skillStart ?? start,
                            skills?.[index - 1]?.start ?? end
                          );

                          const displayedAchievements = achievements.slice(
                            0,
                            props?.maxAchievements ?? undefined
                          );

                          return {
                            translatedJobTitle: await t(
                              `${capitalize(job.id)}${dropOut ? " (not graduated)" : ""}`
                            ),
                            dates: !props?.hideDates && dates.join(" - "),
                            translatedDescription:
                              !experience?.[getResumeKey(astro)]?.short &&
                              !!displayedAchievements.length &&
                              (await t(
                                capitalize(
                                  endDelimiter(
                                    toTextList(displayedAchievements)
                                  )
                                )
                              )),
                          };
                        }
                      )
                    ),
                  };
                }
              )
          )
      )
  );
};

const formattedKnowHow = await getFormattedKnowHow(Astro, Astro.props);
---

{
  formattedKnowHow.map((experiences) => (
    <div {...props}>
      <ol class="list-none ps-0 mt-0 space-y-4">
        {experiences.map(({ translatedId, sections }) => (
          <li class="ps-0">
            <ol class="list-none ps-0 my-0 space-y-4">
              {sections.map(
                ({ translatedJobTitle, translatedDescription, dates }) => (
                  <li class="ps-0 my-0">
                    <div class="flex justify-between text-balance">
                      <Text translateProps={{ disable: true }} class="my-0">
                        {translatedId}
                      </Text>
                      {dates && (
                        <Text
                          translateProps={{ disable: true }}
                          class="my-0 text-right"
                        >
                          {dates}
                        </Text>
                      )}
                    </div>
                    <Text tag="h5" translateProps={{ disable: true }}>
                      {translatedJobTitle}
                    </Text>
                    <ul class="list-none ps-0 my-0">
                      {translatedDescription && (
                        <Text
                          tag="li"
                          class="ps-0 my-0"
                          translateProps={{ disable: true }}
                        >
                          {translatedDescription}
                        </Text>
                      )}
                    </ul>
                  </li>
                )
              )}
            </ol>
          </li>
        ))}
      </ol>
    </div>
  ))
}
