---
import Button from "@layouts/Button.astro";
import type { ComponentProps } from "astro/types";

interface Props extends ComponentProps<typeof Button> {
  buttonName?: string;
}

//? Always add href to allow prefetch

const { className = "", buttonName, href, ...buttonProps } = Astro.props;
---

<Button
  className={`${buttonName ?? (href ? "back-link" : "back-button")} ${className} !text-3xl fixed left-6 lg:left-9 top-[calc(100dvh-5rem)] lg:top-12 max-w-14 lg:max-w-10 min-h-14 lg:min-h-fit lg:max-h-10 hover:scale-110 active:scale-75`}
  rounded
  navigate
  href={href}
  {...buttonProps}
>
  <p class="mt-[-0.2rem] ml-[-0.1rem] lg:ml-[-0.2rem]">â—‚</p>
</Button>
<script>
  // Executed once to set back fallback
  const startLocation = location.pathname;
  const startState = history.state;

  history.replaceState({ scrollX: 0, scrollY: 0 }, "", "/");
  history.pushState(startState, "", startLocation);

  const back = () => {
    // This code fixes Astro scroll restoration
    const { scrollX, scrollY } = history.state as {
      scrollX: number;
      scrollY: number;
    };

    sessionStorage.setItem(
      location.pathname,
      JSON.stringify({
        left: scrollX,
        top: scrollY,
      } satisfies ScrollToOptions)
    );

    history.back();
  };

  document.addEventListener("astro:page-load", () =>
    document
      .querySelectorAll<HTMLButtonElement>("button.back-button")
      .forEach((button) => button.addEventListener("click", back))
  );

  document.addEventListener("astro:before-preparation", () =>
    document
      .querySelectorAll<HTMLButtonElement>("button.back-button")
      .forEach((button) => button.removeEventListener("click", back))
  );
</script>
